//
// Generated by Bluespec Compiler, version 2012.01.A (build 26572, 2012-01-17)
//
// On Tue Jun 28 13:55:03 BST 2016
//
// Method conflict info:
// Method: bluetile_client_request_get
// Conflict-free: bluetile_client_response_put,
// 	       bluetile_server_SUBCMDCPU_request_put,
// 	       bluetile_server_SUBCMDCPU_response_get,
// 	       bluetile_server_CMDQ_request_put,
// 	       bluetile_server_CMDQ_response_get,
// 	       bluetile_server_CMDPROCESSOR_request_put,
// 	       bluetile_server_CMDPROCESSOR_response_get,
// 	       bluetile_client_CMDQ_request_get,
// 	       bluetile_client_CMDQ_response_put
// Conflicts: bluetile_client_request_get
//
// Method: bluetile_client_response_put
// Conflict-free: bluetile_client_request_get,
// 	       bluetile_server_SUBCMDCPU_request_put,
// 	       bluetile_server_SUBCMDCPU_response_get,
// 	       bluetile_server_CMDQ_request_put,
// 	       bluetile_server_CMDQ_response_get,
// 	       bluetile_server_CMDPROCESSOR_request_put,
// 	       bluetile_server_CMDPROCESSOR_response_get,
// 	       bluetile_client_CMDQ_request_get,
// 	       bluetile_client_CMDQ_response_put
// Conflicts: bluetile_client_response_put
//
// Method: bluetile_server_SUBCMDCPU_request_put
// Conflict-free: bluetile_client_request_get,
// 	       bluetile_client_response_put,
// 	       bluetile_server_SUBCMDCPU_response_get,
// 	       bluetile_server_CMDQ_request_put,
// 	       bluetile_server_CMDQ_response_get,
// 	       bluetile_server_CMDPROCESSOR_request_put,
// 	       bluetile_server_CMDPROCESSOR_response_get,
// 	       bluetile_client_CMDQ_request_get,
// 	       bluetile_client_CMDQ_response_put
// Conflicts: bluetile_server_SUBCMDCPU_request_put
//
// Method: bluetile_server_SUBCMDCPU_response_get
// Conflict-free: bluetile_client_request_get,
// 	       bluetile_client_response_put,
// 	       bluetile_server_SUBCMDCPU_request_put,
// 	       bluetile_server_CMDQ_request_put,
// 	       bluetile_server_CMDQ_response_get,
// 	       bluetile_server_CMDPROCESSOR_request_put,
// 	       bluetile_server_CMDPROCESSOR_response_get,
// 	       bluetile_client_CMDQ_request_get,
// 	       bluetile_client_CMDQ_response_put
// Conflicts: bluetile_server_SUBCMDCPU_response_get
//
// Method: bluetile_server_CMDQ_request_put
// Conflict-free: bluetile_client_request_get,
// 	       bluetile_client_response_put,
// 	       bluetile_server_SUBCMDCPU_request_put,
// 	       bluetile_server_SUBCMDCPU_response_get,
// 	       bluetile_server_CMDQ_response_get,
// 	       bluetile_server_CMDPROCESSOR_request_put,
// 	       bluetile_server_CMDPROCESSOR_response_get,
// 	       bluetile_client_CMDQ_request_get,
// 	       bluetile_client_CMDQ_response_put
// Conflicts: bluetile_server_CMDQ_request_put
//
// Method: bluetile_server_CMDQ_response_get
// Conflict-free: bluetile_client_request_get,
// 	       bluetile_client_response_put,
// 	       bluetile_server_SUBCMDCPU_request_put,
// 	       bluetile_server_SUBCMDCPU_response_get,
// 	       bluetile_server_CMDQ_request_put,
// 	       bluetile_server_CMDPROCESSOR_request_put,
// 	       bluetile_server_CMDPROCESSOR_response_get,
// 	       bluetile_client_CMDQ_request_get,
// 	       bluetile_client_CMDQ_response_put
// Conflicts: bluetile_server_CMDQ_response_get
//
// Method: bluetile_server_CMDPROCESSOR_request_put
// Conflict-free: bluetile_client_request_get,
// 	       bluetile_client_response_put,
// 	       bluetile_server_SUBCMDCPU_request_put,
// 	       bluetile_server_SUBCMDCPU_response_get,
// 	       bluetile_server_CMDQ_request_put,
// 	       bluetile_server_CMDQ_response_get,
// 	       bluetile_server_CMDPROCESSOR_response_get,
// 	       bluetile_client_CMDQ_request_get,
// 	       bluetile_client_CMDQ_response_put
// Conflicts: bluetile_server_CMDPROCESSOR_request_put
//
// Method: bluetile_server_CMDPROCESSOR_response_get
// Conflict-free: bluetile_client_request_get,
// 	       bluetile_client_response_put,
// 	       bluetile_server_SUBCMDCPU_request_put,
// 	       bluetile_server_SUBCMDCPU_response_get,
// 	       bluetile_server_CMDQ_request_put,
// 	       bluetile_server_CMDQ_response_get,
// 	       bluetile_server_CMDPROCESSOR_request_put,
// 	       bluetile_client_CMDQ_request_get,
// 	       bluetile_client_CMDQ_response_put
// Conflicts: bluetile_server_CMDPROCESSOR_response_get
//
// Method: bluetile_client_CMDQ_request_get
// Conflict-free: bluetile_client_request_get,
// 	       bluetile_client_response_put,
// 	       bluetile_server_SUBCMDCPU_request_put,
// 	       bluetile_server_SUBCMDCPU_response_get,
// 	       bluetile_server_CMDQ_request_put,
// 	       bluetile_server_CMDQ_response_get,
// 	       bluetile_server_CMDPROCESSOR_request_put,
// 	       bluetile_server_CMDPROCESSOR_response_get,
// 	       bluetile_client_CMDQ_response_put
// Conflicts: bluetile_client_CMDQ_request_get
//
// Method: bluetile_client_CMDQ_response_put
// Conflict-free: bluetile_client_request_get,
// 	       bluetile_client_response_put,
// 	       bluetile_server_SUBCMDCPU_request_put,
// 	       bluetile_server_SUBCMDCPU_response_get,
// 	       bluetile_server_CMDQ_request_put,
// 	       bluetile_server_CMDQ_response_get,
// 	       bluetile_server_CMDPROCESSOR_request_put,
// 	       bluetile_server_CMDPROCESSOR_response_get,
// 	       bluetile_client_CMDQ_request_get
// Conflicts: bluetile_client_CMDQ_response_put
//
//
// Ports:
// Name                         I/O  size props
// bluetile_client_request_get    O    32 reg
// RDY_bluetile_client_request_get  O     1 reg
// RDY_bluetile_client_response_put  O     1 reg
// RDY_bluetile_server_SUBCMDCPU_request_put  O     1 reg
// bluetile_server_SUBCMDCPU_response_get  O    32 reg
// RDY_bluetile_server_SUBCMDCPU_response_get  O     1 reg
// RDY_bluetile_server_CMDQ_request_put  O     1 reg
// bluetile_server_CMDQ_response_get  O    32 reg
// RDY_bluetile_server_CMDQ_response_get  O     1 reg
// RDY_bluetile_server_CMDPROCESSOR_request_put  O     1 reg
// bluetile_server_CMDPROCESSOR_response_get  O    32 reg
// RDY_bluetile_server_CMDPROCESSOR_response_get  O     1 reg
// bluetile_client_CMDQ_request_get  O    32 reg
// RDY_bluetile_client_CMDQ_request_get  O     1 reg
// RDY_bluetile_client_CMDQ_response_put  O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// bluetile_client_response_put   I    32 reg
// bluetile_server_SUBCMDCPU_request_put  I    32 reg
// bluetile_server_CMDQ_request_put  I    32 reg
// bluetile_server_CMDPROCESSOR_request_put  I    32 reg
// bluetile_client_CMDQ_response_put  I    32 reg
// EN_bluetile_client_response_put  I     1
// EN_bluetile_server_SUBCMDCPU_request_put  I     1
// EN_bluetile_server_CMDQ_request_put  I     1
// EN_bluetile_server_CMDPROCESSOR_request_put  I     1
// EN_bluetile_client_CMDQ_response_put  I     1
// EN_bluetile_client_request_get  I     1
// EN_bluetile_server_SUBCMDCPU_response_get  I     1
// EN_bluetile_server_CMDQ_response_get  I     1
// EN_bluetile_server_CMDPROCESSOR_response_get  I     1
// EN_bluetile_client_CMDQ_request_get  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkGPIOCMD_hw_manager(CLK,
			    RST_N,

			    EN_bluetile_client_request_get,
			    bluetile_client_request_get,
			    RDY_bluetile_client_request_get,

			    bluetile_client_response_put,
			    EN_bluetile_client_response_put,
			    RDY_bluetile_client_response_put,

			    bluetile_server_SUBCMDCPU_request_put,
			    EN_bluetile_server_SUBCMDCPU_request_put,
			    RDY_bluetile_server_SUBCMDCPU_request_put,

			    EN_bluetile_server_SUBCMDCPU_response_get,
			    bluetile_server_SUBCMDCPU_response_get,
			    RDY_bluetile_server_SUBCMDCPU_response_get,

			    bluetile_server_CMDQ_request_put,
			    EN_bluetile_server_CMDQ_request_put,
			    RDY_bluetile_server_CMDQ_request_put,

			    EN_bluetile_server_CMDQ_response_get,
			    bluetile_server_CMDQ_response_get,
			    RDY_bluetile_server_CMDQ_response_get,

			    bluetile_server_CMDPROCESSOR_request_put,
			    EN_bluetile_server_CMDPROCESSOR_request_put,
			    RDY_bluetile_server_CMDPROCESSOR_request_put,

			    EN_bluetile_server_CMDPROCESSOR_response_get,
			    bluetile_server_CMDPROCESSOR_response_get,
			    RDY_bluetile_server_CMDPROCESSOR_response_get,

			    EN_bluetile_client_CMDQ_request_get,
			    bluetile_client_CMDQ_request_get,
			    RDY_bluetile_client_CMDQ_request_get,

			    bluetile_client_CMDQ_response_put,
			    EN_bluetile_client_CMDQ_response_put,
			    RDY_bluetile_client_CMDQ_response_put);
  input  CLK;
  input  RST_N;

  // actionvalue method bluetile_client_request_get
  input  EN_bluetile_client_request_get;
  output [31 : 0] bluetile_client_request_get;
  output RDY_bluetile_client_request_get;

  // action method bluetile_client_response_put
  input  [31 : 0] bluetile_client_response_put;
  input  EN_bluetile_client_response_put;
  output RDY_bluetile_client_response_put;

  // action method bluetile_server_SUBCMDCPU_request_put
  input  [31 : 0] bluetile_server_SUBCMDCPU_request_put;
  input  EN_bluetile_server_SUBCMDCPU_request_put;
  output RDY_bluetile_server_SUBCMDCPU_request_put;

  // actionvalue method bluetile_server_SUBCMDCPU_response_get
  input  EN_bluetile_server_SUBCMDCPU_response_get;
  output [31 : 0] bluetile_server_SUBCMDCPU_response_get;
  output RDY_bluetile_server_SUBCMDCPU_response_get;

  // action method bluetile_server_CMDQ_request_put
  input  [31 : 0] bluetile_server_CMDQ_request_put;
  input  EN_bluetile_server_CMDQ_request_put;
  output RDY_bluetile_server_CMDQ_request_put;

  // actionvalue method bluetile_server_CMDQ_response_get
  input  EN_bluetile_server_CMDQ_response_get;
  output [31 : 0] bluetile_server_CMDQ_response_get;
  output RDY_bluetile_server_CMDQ_response_get;

  // action method bluetile_server_CMDPROCESSOR_request_put
  input  [31 : 0] bluetile_server_CMDPROCESSOR_request_put;
  input  EN_bluetile_server_CMDPROCESSOR_request_put;
  output RDY_bluetile_server_CMDPROCESSOR_request_put;

  // actionvalue method bluetile_server_CMDPROCESSOR_response_get
  input  EN_bluetile_server_CMDPROCESSOR_response_get;
  output [31 : 0] bluetile_server_CMDPROCESSOR_response_get;
  output RDY_bluetile_server_CMDPROCESSOR_response_get;

  // actionvalue method bluetile_client_CMDQ_request_get
  input  EN_bluetile_client_CMDQ_request_get;
  output [31 : 0] bluetile_client_CMDQ_request_get;
  output RDY_bluetile_client_CMDQ_request_get;

  // action method bluetile_client_CMDQ_response_put
  input  [31 : 0] bluetile_client_CMDQ_response_put;
  input  EN_bluetile_client_CMDQ_response_put;
  output RDY_bluetile_client_CMDQ_response_put;

  // signals for module outputs
  wire [31 : 0] bluetile_client_CMDQ_request_get,
		bluetile_client_request_get,
		bluetile_server_CMDPROCESSOR_response_get,
		bluetile_server_CMDQ_response_get,
		bluetile_server_SUBCMDCPU_response_get;
  wire RDY_bluetile_client_CMDQ_request_get,
       RDY_bluetile_client_CMDQ_response_put,
       RDY_bluetile_client_request_get,
       RDY_bluetile_client_response_put,
       RDY_bluetile_server_CMDPROCESSOR_request_put,
       RDY_bluetile_server_CMDPROCESSOR_response_get,
       RDY_bluetile_server_CMDQ_request_put,
       RDY_bluetile_server_CMDQ_response_get,
       RDY_bluetile_server_SUBCMDCPU_request_put,
       RDY_bluetile_server_SUBCMDCPU_response_get;

  // inlined wires
  wire cmdq_FSM_start_wire$whas,
       cmdq_FSM_state_set_pw$whas,
       hw_Manager_FSM_start_wire$whas,
       hw_Manager_FSM_state_set_pw$whas;

  // register bluetiles_header0
  reg [31 : 0] bluetiles_header0;
  wire [31 : 0] bluetiles_header0$D_IN;
  wire bluetiles_header0$EN;

  // register bluetiles_header1
  reg [31 : 0] bluetiles_header1;
  wire [31 : 0] bluetiles_header1$D_IN;
  wire bluetiles_header1$EN;

  // register bluetiles_header2
  reg [31 : 0] bluetiles_header2;
  wire [31 : 0] bluetiles_header2$D_IN;
  wire bluetiles_header2$EN;

  // register cmdq_FSM_start_reg
  reg cmdq_FSM_start_reg;
  wire cmdq_FSM_start_reg$D_IN, cmdq_FSM_start_reg$EN;

  // register cmdq_FSM_start_reg_1
  reg cmdq_FSM_start_reg_1;
  wire cmdq_FSM_start_reg_1$D_IN, cmdq_FSM_start_reg_1$EN;

  // register cmdq_FSM_state_can_overlap
  reg cmdq_FSM_state_can_overlap;
  wire cmdq_FSM_state_can_overlap$D_IN, cmdq_FSM_state_can_overlap$EN;

  // register cmdq_FSM_state_fired
  reg cmdq_FSM_state_fired;
  wire cmdq_FSM_state_fired$D_IN, cmdq_FSM_state_fired$EN;

  // register cmdq_FSM_state_mkFSMstate
  reg [2 : 0] cmdq_FSM_state_mkFSMstate;
  reg [2 : 0] cmdq_FSM_state_mkFSMstate$D_IN;
  wire cmdq_FSM_state_mkFSMstate$EN;

  // register cmdq_header0
  reg [31 : 0] cmdq_header0;
  wire [31 : 0] cmdq_header0$D_IN;
  wire cmdq_header0$EN;

  // register counter_00
  reg [7 : 0] counter_00;
  wire [7 : 0] counter_00$D_IN;
  wire counter_00$EN;

  // register counter_FF
  reg [7 : 0] counter_FF;
  wire [7 : 0] counter_FF$D_IN;
  wire counter_FF$EN;

  // register hw_Manager_FSM_start_reg
  reg hw_Manager_FSM_start_reg;
  wire hw_Manager_FSM_start_reg$D_IN, hw_Manager_FSM_start_reg$EN;

  // register hw_Manager_FSM_start_reg_1
  reg hw_Manager_FSM_start_reg_1;
  wire hw_Manager_FSM_start_reg_1$D_IN, hw_Manager_FSM_start_reg_1$EN;

  // register hw_Manager_FSM_state_can_overlap
  reg hw_Manager_FSM_state_can_overlap;
  wire hw_Manager_FSM_state_can_overlap$D_IN,
       hw_Manager_FSM_state_can_overlap$EN;

  // register hw_Manager_FSM_state_fired
  reg hw_Manager_FSM_state_fired;
  wire hw_Manager_FSM_state_fired$D_IN, hw_Manager_FSM_state_fired$EN;

  // register hw_Manager_FSM_state_mkFSMstate
  reg [3 : 0] hw_Manager_FSM_state_mkFSMstate;
  reg [3 : 0] hw_Manager_FSM_state_mkFSMstate$D_IN;
  wire hw_Manager_FSM_state_mkFSMstate$EN;

  // register table_cmdq_cpu_0
  reg [31 : 0] table_cmdq_cpu_0;
  wire [31 : 0] table_cmdq_cpu_0$D_IN;
  wire table_cmdq_cpu_0$EN;

  // register table_cmdq_cpu_1
  reg [31 : 0] table_cmdq_cpu_1;
  wire [31 : 0] table_cmdq_cpu_1$D_IN;
  wire table_cmdq_cpu_1$EN;

  // register table_cmdq_cpu_2
  reg [31 : 0] table_cmdq_cpu_2;
  wire [31 : 0] table_cmdq_cpu_2$D_IN;
  wire table_cmdq_cpu_2$EN;

  // register table_cmdq_cpu_3
  reg [31 : 0] table_cmdq_cpu_3;
  wire [31 : 0] table_cmdq_cpu_3$D_IN;
  wire table_cmdq_cpu_3$EN;

  // register table_cmdq_cpu_4
  reg [31 : 0] table_cmdq_cpu_4;
  wire [31 : 0] table_cmdq_cpu_4$D_IN;
  wire table_cmdq_cpu_4$EN;

  // register table_cmdq_cpu_5
  reg [31 : 0] table_cmdq_cpu_5;
  wire [31 : 0] table_cmdq_cpu_5$D_IN;
  wire table_cmdq_cpu_5$EN;

  // register table_cmdq_cpu_6
  reg [31 : 0] table_cmdq_cpu_6;
  wire [31 : 0] table_cmdq_cpu_6$D_IN;
  wire table_cmdq_cpu_6$EN;

  // register table_cmdq_cpu_7
  reg [31 : 0] table_cmdq_cpu_7;
  wire [31 : 0] table_cmdq_cpu_7$D_IN;
  wire table_cmdq_cpu_7$EN;

  // register table_cmdq_cpu_8
  reg [31 : 0] table_cmdq_cpu_8;
  wire [31 : 0] table_cmdq_cpu_8$D_IN;
  wire table_cmdq_cpu_8$EN;

  // ports of submodule i_client
  wire [31 : 0] i_client$D_IN, i_client$D_OUT;
  wire i_client$CLR,
       i_client$DEQ,
       i_client$EMPTY_N,
       i_client$ENQ,
       i_client$FULL_N;

  // ports of submodule i_client_CMDQ
  wire [31 : 0] i_client_CMDQ$D_IN, i_client_CMDQ$D_OUT;
  wire i_client_CMDQ$CLR,
       i_client_CMDQ$DEQ,
       i_client_CMDQ$EMPTY_N,
       i_client_CMDQ$ENQ,
       i_client_CMDQ$FULL_N;

  // ports of submodule i_server_CMDPROCESSOR
  wire [31 : 0] i_server_CMDPROCESSOR$D_IN;
  wire i_server_CMDPROCESSOR$CLR,
       i_server_CMDPROCESSOR$DEQ,
       i_server_CMDPROCESSOR$ENQ,
       i_server_CMDPROCESSOR$FULL_N;

  // ports of submodule i_server_CMDQ
  wire [31 : 0] i_server_CMDQ$D_IN;
  wire i_server_CMDQ$CLR,
       i_server_CMDQ$DEQ,
       i_server_CMDQ$ENQ,
       i_server_CMDQ$FULL_N;

  // ports of submodule i_server_SUBCMDCPU
  wire [31 : 0] i_server_SUBCMDCPU$D_IN;
  wire i_server_SUBCMDCPU$CLR,
       i_server_SUBCMDCPU$DEQ,
       i_server_SUBCMDCPU$ENQ,
       i_server_SUBCMDCPU$FULL_N;

  // ports of submodule o_client
  wire [31 : 0] o_client$D_IN, o_client$D_OUT;
  wire o_client$CLR,
       o_client$DEQ,
       o_client$EMPTY_N,
       o_client$ENQ,
       o_client$FULL_N;

  // ports of submodule o_client_CMDQ
  wire [31 : 0] o_client_CMDQ$D_IN, o_client_CMDQ$D_OUT;
  wire o_client_CMDQ$CLR,
       o_client_CMDQ$DEQ,
       o_client_CMDQ$EMPTY_N,
       o_client_CMDQ$ENQ;

  // ports of submodule o_server_CMDPROCESSOR
  wire [31 : 0] o_server_CMDPROCESSOR$D_IN, o_server_CMDPROCESSOR$D_OUT;
  wire o_server_CMDPROCESSOR$CLR,
       o_server_CMDPROCESSOR$DEQ,
       o_server_CMDPROCESSOR$EMPTY_N,
       o_server_CMDPROCESSOR$ENQ,
       o_server_CMDPROCESSOR$FULL_N;

  // ports of submodule o_server_CMDQ
  reg [31 : 0] o_server_CMDQ$D_IN;
  wire [31 : 0] o_server_CMDQ$D_OUT;
  wire o_server_CMDQ$CLR,
       o_server_CMDQ$DEQ,
       o_server_CMDQ$EMPTY_N,
       o_server_CMDQ$ENQ,
       o_server_CMDQ$FULL_N;

  // ports of submodule o_server_SUBCMDCPU
  wire [31 : 0] o_server_SUBCMDCPU$D_IN, o_server_SUBCMDCPU$D_OUT;
  wire o_server_SUBCMDCPU$CLR,
       o_server_SUBCMDCPU$DEQ,
       o_server_SUBCMDCPU$EMPTY_N,
       o_server_SUBCMDCPU$ENQ,
       o_server_SUBCMDCPU$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_cmdq_FSM_action_l142c17,
       WILL_FIRE_RL_cmdq_FSM_action_l148c25,
       WILL_FIRE_RL_cmdq_FSM_action_l150c25,
       WILL_FIRE_RL_cmdq_FSM_fsm_start,
       WILL_FIRE_RL_cmdq_FSM_idle_l140c25,
       WILL_FIRE_RL_hw_Manager_FSM_action_l100c33,
       WILL_FIRE_RL_hw_Manager_FSM_action_l110c41,
       WILL_FIRE_RL_hw_Manager_FSM_action_l115c65,
       WILL_FIRE_RL_hw_Manager_FSM_action_l129c65,
       WILL_FIRE_RL_hw_Manager_FSM_action_l66c17,
       WILL_FIRE_RL_hw_Manager_FSM_action_l71c17,
       WILL_FIRE_RL_hw_Manager_FSM_action_l76c17,
       WILL_FIRE_RL_hw_Manager_FSM_action_l82c46,
       WILL_FIRE_RL_hw_Manager_FSM_action_l96c57,
       WILL_FIRE_RL_hw_Manager_FSM_fsm_start,
       WILL_FIRE_RL_hw_Manager_FSM_idle_l64c31,
       WILL_FIRE_RL_hw_Manager_FSM_idle_l64c31_1,
       WILL_FIRE_RL_hw_Manager_FSM_idle_l64c31_2,
       WILL_FIRE_RL_hw_Manager_FSM_idle_l64c31_3,
       WILL_FIRE_RL_hw_Manager_FSM_idle_l64c31_4,
       WILL_FIRE_RL_hw_Manager_FSM_idle_l64c31_5,
       WILL_FIRE_RL_hw_Manager_FSM_idle_l64c31_6;

  // inputs to muxes for submodule ports
  wire [31 : 0] MUX_o_client$enq_1__VAL_1,
		MUX_o_client$enq_1__VAL_2,
		MUX_o_server_CMDQ$enq_1__VAL_3,
		MUX_o_server_SUBCMDCPU$enq_1__VAL_2;
  wire [7 : 0] MUX_counter_00$write_1__VAL_2, MUX_counter_FF$write_1__VAL_2;
  wire MUX_hw_Manager_FSM_state_mkFSMstate$write_1__SEL_1,
       MUX_o_server_CMDQ$enq_1__SEL_1,
       MUX_o_server_CMDQ$enq_1__SEL_2,
       MUX_o_server_CMDQ$enq_1__SEL_3;

  // remaining internal signals
  reg [31 : 0] CASE_cmdq_header0_BITS_31_TO_24_table_cmdq_cpu_ETC__q1;
  wire NOT_bluetiles_header2_8_BITS_31_TO_24_9_EQ_0xD_ETC___d63,
       cmdq_FSM_abort_whas__88_AND_cmdq_FSM_abort_wge_ETC___d268,
       cmdq_FSM_start_wire_whas__91_AND_cmdq_FSM_star_ETC___d221,
       counter_FF_1_EQ_0_2_AND_NOT_bluetiles_header2__ETC___d178,
       hw_Manager_FSM_abort_whas_AND_hw_Manager_FSM_a_ETC___d182,
       hw_Manager_FSM_start_wire_whas_AND_hw_Manager__ETC___d89;

  // actionvalue method bluetile_client_request_get
  assign bluetile_client_request_get = o_client$D_OUT ;
  assign RDY_bluetile_client_request_get = o_client$EMPTY_N ;

  // action method bluetile_client_response_put
  assign RDY_bluetile_client_response_put = i_client$FULL_N ;

  // action method bluetile_server_SUBCMDCPU_request_put
  assign RDY_bluetile_server_SUBCMDCPU_request_put =
	     i_server_SUBCMDCPU$FULL_N ;

  // actionvalue method bluetile_server_SUBCMDCPU_response_get
  assign bluetile_server_SUBCMDCPU_response_get = o_server_SUBCMDCPU$D_OUT ;
  assign RDY_bluetile_server_SUBCMDCPU_response_get =
	     o_server_SUBCMDCPU$EMPTY_N ;

  // action method bluetile_server_CMDQ_request_put
  assign RDY_bluetile_server_CMDQ_request_put = i_server_CMDQ$FULL_N ;

  // actionvalue method bluetile_server_CMDQ_response_get
  assign bluetile_server_CMDQ_response_get = o_server_CMDQ$D_OUT ;
  assign RDY_bluetile_server_CMDQ_response_get = o_server_CMDQ$EMPTY_N ;

  // action method bluetile_server_CMDPROCESSOR_request_put
  assign RDY_bluetile_server_CMDPROCESSOR_request_put =
	     i_server_CMDPROCESSOR$FULL_N ;

  // actionvalue method bluetile_server_CMDPROCESSOR_response_get
  assign bluetile_server_CMDPROCESSOR_response_get =
	     o_server_CMDPROCESSOR$D_OUT ;
  assign RDY_bluetile_server_CMDPROCESSOR_response_get =
	     o_server_CMDPROCESSOR$EMPTY_N ;

  // actionvalue method bluetile_client_CMDQ_request_get
  assign bluetile_client_CMDQ_request_get = o_client_CMDQ$D_OUT ;
  assign RDY_bluetile_client_CMDQ_request_get = o_client_CMDQ$EMPTY_N ;

  // action method bluetile_client_CMDQ_response_put
  assign RDY_bluetile_client_CMDQ_response_put = i_client_CMDQ$FULL_N ;

  // submodule i_client
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd100),
	      .p3cntr_width(32'd7),
	      .guarded(32'd1)) i_client(.RST_N(RST_N),
					.CLK(CLK),
					.D_IN(i_client$D_IN),
					.ENQ(i_client$ENQ),
					.DEQ(i_client$DEQ),
					.CLR(i_client$CLR),
					.D_OUT(i_client$D_OUT),
					.FULL_N(i_client$FULL_N),
					.EMPTY_N(i_client$EMPTY_N));

  // submodule i_client_CMDQ
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd50),
	      .p3cntr_width(32'd6),
	      .guarded(32'd1)) i_client_CMDQ(.RST_N(RST_N),
					     .CLK(CLK),
					     .D_IN(i_client_CMDQ$D_IN),
					     .ENQ(i_client_CMDQ$ENQ),
					     .DEQ(i_client_CMDQ$DEQ),
					     .CLR(i_client_CMDQ$CLR),
					     .D_OUT(i_client_CMDQ$D_OUT),
					     .FULL_N(i_client_CMDQ$FULL_N),
					     .EMPTY_N(i_client_CMDQ$EMPTY_N));

  // submodule i_server_CMDPROCESSOR
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd50),
	      .p3cntr_width(32'd6),
	      .guarded(32'd1)) i_server_CMDPROCESSOR(.RST_N(RST_N),
						     .CLK(CLK),
						     .D_IN(i_server_CMDPROCESSOR$D_IN),
						     .ENQ(i_server_CMDPROCESSOR$ENQ),
						     .DEQ(i_server_CMDPROCESSOR$DEQ),
						     .CLR(i_server_CMDPROCESSOR$CLR),
						     .D_OUT(),
						     .FULL_N(i_server_CMDPROCESSOR$FULL_N),
						     .EMPTY_N());

  // submodule i_server_CMDQ
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd50),
	      .p3cntr_width(32'd6),
	      .guarded(32'd1)) i_server_CMDQ(.RST_N(RST_N),
					     .CLK(CLK),
					     .D_IN(i_server_CMDQ$D_IN),
					     .ENQ(i_server_CMDQ$ENQ),
					     .DEQ(i_server_CMDQ$DEQ),
					     .CLR(i_server_CMDQ$CLR),
					     .D_OUT(),
					     .FULL_N(i_server_CMDQ$FULL_N),
					     .EMPTY_N());

  // submodule i_server_SUBCMDCPU
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd50),
	      .p3cntr_width(32'd6),
	      .guarded(32'd1)) i_server_SUBCMDCPU(.RST_N(RST_N),
						  .CLK(CLK),
						  .D_IN(i_server_SUBCMDCPU$D_IN),
						  .ENQ(i_server_SUBCMDCPU$ENQ),
						  .DEQ(i_server_SUBCMDCPU$DEQ),
						  .CLR(i_server_SUBCMDCPU$CLR),
						  .D_OUT(),
						  .FULL_N(i_server_SUBCMDCPU$FULL_N),
						  .EMPTY_N());

  // submodule o_client
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd100),
	      .p3cntr_width(32'd7),
	      .guarded(32'd1)) o_client(.RST_N(RST_N),
					.CLK(CLK),
					.D_IN(o_client$D_IN),
					.ENQ(o_client$ENQ),
					.DEQ(o_client$DEQ),
					.CLR(o_client$CLR),
					.D_OUT(o_client$D_OUT),
					.FULL_N(o_client$FULL_N),
					.EMPTY_N(o_client$EMPTY_N));

  // submodule o_client_CMDQ
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd50),
	      .p3cntr_width(32'd6),
	      .guarded(32'd1)) o_client_CMDQ(.RST_N(RST_N),
					     .CLK(CLK),
					     .D_IN(o_client_CMDQ$D_IN),
					     .ENQ(o_client_CMDQ$ENQ),
					     .DEQ(o_client_CMDQ$DEQ),
					     .CLR(o_client_CMDQ$CLR),
					     .D_OUT(o_client_CMDQ$D_OUT),
					     .FULL_N(),
					     .EMPTY_N(o_client_CMDQ$EMPTY_N));

  // submodule o_server_CMDPROCESSOR
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd50),
	      .p3cntr_width(32'd6),
	      .guarded(32'd1)) o_server_CMDPROCESSOR(.RST_N(RST_N),
						     .CLK(CLK),
						     .D_IN(o_server_CMDPROCESSOR$D_IN),
						     .ENQ(o_server_CMDPROCESSOR$ENQ),
						     .DEQ(o_server_CMDPROCESSOR$DEQ),
						     .CLR(o_server_CMDPROCESSOR$CLR),
						     .D_OUT(o_server_CMDPROCESSOR$D_OUT),
						     .FULL_N(o_server_CMDPROCESSOR$FULL_N),
						     .EMPTY_N(o_server_CMDPROCESSOR$EMPTY_N));

  // submodule o_server_CMDQ
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd50),
	      .p3cntr_width(32'd6),
	      .guarded(32'd1)) o_server_CMDQ(.RST_N(RST_N),
					     .CLK(CLK),
					     .D_IN(o_server_CMDQ$D_IN),
					     .ENQ(o_server_CMDQ$ENQ),
					     .DEQ(o_server_CMDQ$DEQ),
					     .CLR(o_server_CMDQ$CLR),
					     .D_OUT(o_server_CMDQ$D_OUT),
					     .FULL_N(o_server_CMDQ$FULL_N),
					     .EMPTY_N(o_server_CMDQ$EMPTY_N));

  // submodule o_server_SUBCMDCPU
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd50),
	      .p3cntr_width(32'd6),
	      .guarded(32'd1)) o_server_SUBCMDCPU(.RST_N(RST_N),
						  .CLK(CLK),
						  .D_IN(o_server_SUBCMDCPU$D_IN),
						  .ENQ(o_server_SUBCMDCPU$ENQ),
						  .DEQ(o_server_SUBCMDCPU$DEQ),
						  .CLR(o_server_SUBCMDCPU$CLR),
						  .D_OUT(o_server_SUBCMDCPU$D_OUT),
						  .FULL_N(o_server_SUBCMDCPU$FULL_N),
						  .EMPTY_N(o_server_SUBCMDCPU$EMPTY_N));

  // rule RL_hw_Manager_FSM_action_l71c17
  assign WILL_FIRE_RL_hw_Manager_FSM_action_l71c17 =
	     i_client$EMPTY_N && hw_Manager_FSM_state_mkFSMstate == 4'd1 ;

  // rule RL_hw_Manager_FSM_action_l76c17
  assign WILL_FIRE_RL_hw_Manager_FSM_action_l76c17 =
	     i_client$EMPTY_N && hw_Manager_FSM_state_mkFSMstate == 4'd2 ;

  // rule RL_hw_Manager_FSM_action_l82c46
  assign WILL_FIRE_RL_hw_Manager_FSM_action_l82c46 =
	     o_server_CMDPROCESSOR$FULL_N &&
	     bluetiles_header2[31:24] == 8'hDD &&
	     hw_Manager_FSM_state_mkFSMstate == 4'd3 ;

  // rule RL_hw_Manager_FSM_action_l110c41
  assign WILL_FIRE_RL_hw_Manager_FSM_action_l110c41 =
	     o_server_SUBCMDCPU$FULL_N &&
	     (bluetiles_header2[31:24] == 8'hFF ||
	      bluetiles_header2[31:24] == 8'hEE) &&
	     hw_Manager_FSM_state_mkFSMstate == 4'd3 ;

  // rule RL_hw_Manager_FSM_action_l115c65
  assign WILL_FIRE_RL_hw_Manager_FSM_action_l115c65 =
	     i_client$EMPTY_N && o_server_SUBCMDCPU$FULL_N &&
	     counter_FF != 8'd0 &&
	     (hw_Manager_FSM_state_mkFSMstate == 4'd8 ||
	      hw_Manager_FSM_state_mkFSMstate == 4'd9) ;

  // rule RL_hw_Manager_FSM_action_l129c65
  assign WILL_FIRE_RL_hw_Manager_FSM_action_l129c65 =
	     i_client$EMPTY_N && o_server_CMDQ$FULL_N && counter_00 != 8'd0 &&
	     (hw_Manager_FSM_state_mkFSMstate == 4'd10 ||
	      hw_Manager_FSM_state_mkFSMstate == 4'd11) ;

  // rule RL_hw_Manager_FSM_fsm_start
  assign WILL_FIRE_RL_hw_Manager_FSM_fsm_start =
	     hw_Manager_FSM_abort_whas_AND_hw_Manager_FSM_a_ETC___d182 &&
	     hw_Manager_FSM_start_reg ;

  // rule RL_hw_Manager_FSM_action_l66c17
  assign WILL_FIRE_RL_hw_Manager_FSM_action_l66c17 =
	     i_client$EMPTY_N &&
	     hw_Manager_FSM_start_wire_whas_AND_hw_Manager__ETC___d89 ;

  // rule RL_hw_Manager_FSM_action_l100c33
  assign WILL_FIRE_RL_hw_Manager_FSM_action_l100c33 =
	     i_client$EMPTY_N && o_server_CMDQ$FULL_N &&
	     (bluetiles_header2[31:24] != 8'hAA &&
	      hw_Manager_FSM_state_mkFSMstate == 4'd5 ||
	      hw_Manager_FSM_state_mkFSMstate == 4'd6) ;

  // rule RL_hw_Manager_FSM_idle_l64c31
  assign WILL_FIRE_RL_hw_Manager_FSM_idle_l64c31 =
	     bluetiles_header2[31:24] != 8'hDD &&
	     bluetiles_header2[31:24] != 8'hAA &&
	     bluetiles_header2[31:24] != 8'hCC &&
	     bluetiles_header2[31:24] != 8'hBB &&
	     bluetiles_header2[31:24] != 8'hFF &&
	     bluetiles_header2[31:24] != 8'hEE &&
	     bluetiles_header2[31:24] != 8'h0 &&
	     !hw_Manager_FSM_start_wire$whas &&
	     hw_Manager_FSM_state_mkFSMstate == 4'd3 ;

  // rule RL_hw_Manager_FSM_idle_l64c31_1
  assign WILL_FIRE_RL_hw_Manager_FSM_idle_l64c31_1 =
	     !hw_Manager_FSM_start_wire$whas &&
	     hw_Manager_FSM_state_mkFSMstate == 4'd4 ;

  // rule RL_hw_Manager_FSM_idle_l64c31_2
  assign WILL_FIRE_RL_hw_Manager_FSM_idle_l64c31_2 =
	     !hw_Manager_FSM_start_wire$whas &&
	     hw_Manager_FSM_state_mkFSMstate == 4'd7 ;

  // rule RL_hw_Manager_FSM_idle_l64c31_3
  assign WILL_FIRE_RL_hw_Manager_FSM_idle_l64c31_3 =
	     counter_FF == 8'd0 && bluetiles_header2[31:24] != 8'h0 &&
	     !hw_Manager_FSM_start_wire$whas &&
	     hw_Manager_FSM_state_mkFSMstate == 4'd8 ;

  // rule RL_hw_Manager_FSM_idle_l64c31_4
  assign WILL_FIRE_RL_hw_Manager_FSM_idle_l64c31_4 =
	     counter_FF == 8'd0 && bluetiles_header2[31:24] != 8'h0 &&
	     !hw_Manager_FSM_start_wire$whas &&
	     hw_Manager_FSM_state_mkFSMstate == 4'd9 ;

  // rule RL_hw_Manager_FSM_idle_l64c31_5
  assign WILL_FIRE_RL_hw_Manager_FSM_idle_l64c31_5 =
	     counter_00 == 8'd0 && !hw_Manager_FSM_start_wire$whas &&
	     hw_Manager_FSM_state_mkFSMstate == 4'd10 ;

  // rule RL_hw_Manager_FSM_idle_l64c31_6
  assign WILL_FIRE_RL_hw_Manager_FSM_idle_l64c31_6 =
	     counter_00 == 8'd0 && !hw_Manager_FSM_start_wire$whas &&
	     hw_Manager_FSM_state_mkFSMstate == 4'd11 ;

  // rule RL_cmdq_FSM_action_l148c25
  assign WILL_FIRE_RL_cmdq_FSM_action_l148c25 =
	     o_client$FULL_N && cmdq_FSM_state_mkFSMstate == 3'd1 ;

  // rule RL_hw_Manager_FSM_action_l96c57
  assign WILL_FIRE_RL_hw_Manager_FSM_action_l96c57 =
	     bluetiles_header2[31:24] == 8'hAA &&
	     hw_Manager_FSM_state_mkFSMstate == 4'd5 ;

  // rule RL_cmdq_FSM_action_l150c25
  assign WILL_FIRE_RL_cmdq_FSM_action_l150c25 =
	     o_client$FULL_N && cmdq_FSM_state_mkFSMstate == 3'd2 ;

  // rule RL_cmdq_FSM_fsm_start
  assign WILL_FIRE_RL_cmdq_FSM_fsm_start =
	     cmdq_FSM_abort_whas__88_AND_cmdq_FSM_abort_wge_ETC___d268 &&
	     cmdq_FSM_start_reg ;

  // rule RL_cmdq_FSM_action_l142c17
  assign WILL_FIRE_RL_cmdq_FSM_action_l142c17 =
	     i_client_CMDQ$EMPTY_N &&
	     cmdq_FSM_start_wire_whas__91_AND_cmdq_FSM_star_ETC___d221 ;

  // rule RL_cmdq_FSM_idle_l140c25
  assign WILL_FIRE_RL_cmdq_FSM_idle_l140c25 =
	     !cmdq_FSM_start_wire$whas && cmdq_FSM_state_mkFSMstate == 3'd3 ;

  // inputs to muxes for submodule ports
  assign MUX_hw_Manager_FSM_state_mkFSMstate$write_1__SEL_1 =
	     WILL_FIRE_RL_hw_Manager_FSM_idle_l64c31_6 ||
	     WILL_FIRE_RL_hw_Manager_FSM_idle_l64c31_5 ||
	     WILL_FIRE_RL_hw_Manager_FSM_idle_l64c31_4 ||
	     WILL_FIRE_RL_hw_Manager_FSM_idle_l64c31_3 ||
	     WILL_FIRE_RL_hw_Manager_FSM_idle_l64c31_2 ||
	     WILL_FIRE_RL_hw_Manager_FSM_idle_l64c31_1 ||
	     WILL_FIRE_RL_hw_Manager_FSM_idle_l64c31 ;
  assign MUX_o_server_CMDQ$enq_1__SEL_1 =
	     WILL_FIRE_RL_hw_Manager_FSM_action_l129c65 ||
	     WILL_FIRE_RL_hw_Manager_FSM_action_l100c33 ;
  assign MUX_o_server_CMDQ$enq_1__SEL_2 =
	     o_server_CMDQ$FULL_N &&
	     (bluetiles_header2[31:24] == 8'hAA ||
	      bluetiles_header2[31:24] == 8'hCC ||
	      bluetiles_header2[31:24] == 8'hBB) &&
	     hw_Manager_FSM_state_mkFSMstate == 4'd3 ;
  assign MUX_o_server_CMDQ$enq_1__SEL_3 =
	     o_server_CMDQ$FULL_N &&
	     (bluetiles_header2[31:24] == 8'h0 &&
	      hw_Manager_FSM_state_mkFSMstate == 4'd3 ||
	      counter_FF == 8'd0 && bluetiles_header2[31:24] == 8'h0 &&
	      hw_Manager_FSM_state_mkFSMstate == 4'd8 ||
	      counter_FF == 8'd0 && bluetiles_header2[31:24] == 8'h0 &&
	      hw_Manager_FSM_state_mkFSMstate == 4'd9) ;
  assign MUX_counter_00$write_1__VAL_2 = counter_00 - 8'd1 ;
  assign MUX_counter_FF$write_1__VAL_2 = counter_FF - 8'd1 ;
  assign MUX_o_client$enq_1__VAL_1 = { 8'h0, cmdq_header0[23:0] } ;
  assign MUX_o_client$enq_1__VAL_2 =
	     { CASE_cmdq_header0_BITS_31_TO_24_table_cmdq_cpu_ETC__q1[31:1],
	       1'd1 } ;
  assign MUX_o_server_CMDQ$enq_1__VAL_3 =
	     { 24'h0, bluetiles_header2[23:16] } ;
  assign MUX_o_server_SUBCMDCPU$enq_1__VAL_2 =
	     { bluetiles_header2[31:24], 8'h0, bluetiles_header2[15:0] } ;

  // inlined wires
  assign hw_Manager_FSM_start_wire$whas =
	     WILL_FIRE_RL_hw_Manager_FSM_fsm_start ||
	     hw_Manager_FSM_start_reg_1 && !hw_Manager_FSM_state_fired ;
  assign cmdq_FSM_start_wire$whas =
	     WILL_FIRE_RL_cmdq_FSM_fsm_start ||
	     cmdq_FSM_start_reg_1 && !cmdq_FSM_state_fired ;
  assign hw_Manager_FSM_state_set_pw$whas =
	     WILL_FIRE_RL_hw_Manager_FSM_idle_l64c31_6 ||
	     WILL_FIRE_RL_hw_Manager_FSM_idle_l64c31_5 ||
	     WILL_FIRE_RL_hw_Manager_FSM_idle_l64c31_4 ||
	     WILL_FIRE_RL_hw_Manager_FSM_idle_l64c31_3 ||
	     WILL_FIRE_RL_hw_Manager_FSM_idle_l64c31_2 ||
	     WILL_FIRE_RL_hw_Manager_FSM_idle_l64c31_1 ||
	     WILL_FIRE_RL_hw_Manager_FSM_idle_l64c31 ||
	     WILL_FIRE_RL_hw_Manager_FSM_action_l129c65 ||
	     MUX_o_server_CMDQ$enq_1__SEL_3 ||
	     WILL_FIRE_RL_hw_Manager_FSM_action_l115c65 ||
	     WILL_FIRE_RL_hw_Manager_FSM_action_l110c41 ||
	     WILL_FIRE_RL_hw_Manager_FSM_action_l100c33 ||
	     WILL_FIRE_RL_hw_Manager_FSM_action_l96c57 ||
	     MUX_o_server_CMDQ$enq_1__SEL_2 ||
	     WILL_FIRE_RL_hw_Manager_FSM_action_l82c46 ||
	     WILL_FIRE_RL_hw_Manager_FSM_action_l76c17 ||
	     WILL_FIRE_RL_hw_Manager_FSM_action_l71c17 ||
	     WILL_FIRE_RL_hw_Manager_FSM_action_l66c17 ;
  assign cmdq_FSM_state_set_pw$whas =
	     WILL_FIRE_RL_cmdq_FSM_idle_l140c25 ||
	     WILL_FIRE_RL_cmdq_FSM_action_l150c25 ||
	     WILL_FIRE_RL_cmdq_FSM_action_l148c25 ||
	     WILL_FIRE_RL_cmdq_FSM_action_l142c17 ;

  // register bluetiles_header0
  assign bluetiles_header0$D_IN = i_client$D_OUT ;
  assign bluetiles_header0$EN = WILL_FIRE_RL_hw_Manager_FSM_action_l66c17 ;

  // register bluetiles_header1
  assign bluetiles_header1$D_IN = i_client$D_OUT ;
  assign bluetiles_header1$EN = WILL_FIRE_RL_hw_Manager_FSM_action_l71c17 ;

  // register bluetiles_header2
  assign bluetiles_header2$D_IN = i_client$D_OUT ;
  assign bluetiles_header2$EN = WILL_FIRE_RL_hw_Manager_FSM_action_l76c17 ;

  // register cmdq_FSM_start_reg
  assign cmdq_FSM_start_reg$D_IN = !WILL_FIRE_RL_cmdq_FSM_fsm_start ;
  assign cmdq_FSM_start_reg$EN =
	     WILL_FIRE_RL_cmdq_FSM_fsm_start ||
	     cmdq_FSM_abort_whas__88_AND_cmdq_FSM_abort_wge_ETC___d268 &&
	     !cmdq_FSM_start_reg ;

  // register cmdq_FSM_start_reg_1
  assign cmdq_FSM_start_reg_1$D_IN = cmdq_FSM_start_wire$whas ;
  assign cmdq_FSM_start_reg_1$EN = 1'd1 ;

  // register cmdq_FSM_state_can_overlap
  assign cmdq_FSM_state_can_overlap$D_IN =
	     cmdq_FSM_state_set_pw$whas || cmdq_FSM_state_can_overlap ;
  assign cmdq_FSM_state_can_overlap$EN = 1'd1 ;

  // register cmdq_FSM_state_fired
  assign cmdq_FSM_state_fired$D_IN = cmdq_FSM_state_set_pw$whas ;
  assign cmdq_FSM_state_fired$EN = 1'd1 ;

  // register cmdq_FSM_state_mkFSMstate
  always@(WILL_FIRE_RL_cmdq_FSM_idle_l140c25 or
	  WILL_FIRE_RL_cmdq_FSM_action_l142c17 or
	  WILL_FIRE_RL_cmdq_FSM_action_l148c25 or
	  WILL_FIRE_RL_cmdq_FSM_action_l150c25)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_cmdq_FSM_idle_l140c25:
	  cmdq_FSM_state_mkFSMstate$D_IN = 3'd0;
      WILL_FIRE_RL_cmdq_FSM_action_l142c17:
	  cmdq_FSM_state_mkFSMstate$D_IN = 3'd1;
      WILL_FIRE_RL_cmdq_FSM_action_l148c25:
	  cmdq_FSM_state_mkFSMstate$D_IN = 3'd2;
      WILL_FIRE_RL_cmdq_FSM_action_l150c25:
	  cmdq_FSM_state_mkFSMstate$D_IN = 3'd3;
      default: cmdq_FSM_state_mkFSMstate$D_IN =
		   3'b010 /* unspecified value */ ;
    endcase
  end
  assign cmdq_FSM_state_mkFSMstate$EN =
	     WILL_FIRE_RL_cmdq_FSM_idle_l140c25 ||
	     WILL_FIRE_RL_cmdq_FSM_action_l142c17 ||
	     WILL_FIRE_RL_cmdq_FSM_action_l148c25 ||
	     WILL_FIRE_RL_cmdq_FSM_action_l150c25 ;

  // register cmdq_header0
  assign cmdq_header0$D_IN = i_client_CMDQ$D_OUT ;
  assign cmdq_header0$EN = WILL_FIRE_RL_cmdq_FSM_action_l142c17 ;

  // register counter_00
  assign counter_00$D_IN =
	     MUX_o_server_CMDQ$enq_1__SEL_3 ?
	       bluetiles_header2[23:16] :
	       MUX_counter_00$write_1__VAL_2 ;
  assign counter_00$EN =
	     MUX_o_server_CMDQ$enq_1__SEL_3 ||
	     WILL_FIRE_RL_hw_Manager_FSM_action_l129c65 ;

  // register counter_FF
  assign counter_FF$D_IN =
	     WILL_FIRE_RL_hw_Manager_FSM_action_l110c41 ?
	       bluetiles_header2[7:0] :
	       MUX_counter_FF$write_1__VAL_2 ;
  assign counter_FF$EN =
	     WILL_FIRE_RL_hw_Manager_FSM_action_l110c41 ||
	     WILL_FIRE_RL_hw_Manager_FSM_action_l115c65 ;

  // register hw_Manager_FSM_start_reg
  assign hw_Manager_FSM_start_reg$D_IN =
	     !WILL_FIRE_RL_hw_Manager_FSM_fsm_start ;
  assign hw_Manager_FSM_start_reg$EN =
	     WILL_FIRE_RL_hw_Manager_FSM_fsm_start ||
	     hw_Manager_FSM_abort_whas_AND_hw_Manager_FSM_a_ETC___d182 &&
	     !hw_Manager_FSM_start_reg ;

  // register hw_Manager_FSM_start_reg_1
  assign hw_Manager_FSM_start_reg_1$D_IN = hw_Manager_FSM_start_wire$whas ;
  assign hw_Manager_FSM_start_reg_1$EN = 1'd1 ;

  // register hw_Manager_FSM_state_can_overlap
  assign hw_Manager_FSM_state_can_overlap$D_IN =
	     hw_Manager_FSM_state_set_pw$whas ||
	     hw_Manager_FSM_state_can_overlap ;
  assign hw_Manager_FSM_state_can_overlap$EN = 1'd1 ;

  // register hw_Manager_FSM_state_fired
  assign hw_Manager_FSM_state_fired$D_IN = hw_Manager_FSM_state_set_pw$whas ;
  assign hw_Manager_FSM_state_fired$EN = 1'd1 ;

  // register hw_Manager_FSM_state_mkFSMstate
  always@(MUX_hw_Manager_FSM_state_mkFSMstate$write_1__SEL_1 or
	  WILL_FIRE_RL_hw_Manager_FSM_action_l66c17 or
	  WILL_FIRE_RL_hw_Manager_FSM_action_l71c17 or
	  WILL_FIRE_RL_hw_Manager_FSM_action_l76c17 or
	  WILL_FIRE_RL_hw_Manager_FSM_action_l82c46 or
	  MUX_o_server_CMDQ$enq_1__SEL_2 or
	  WILL_FIRE_RL_hw_Manager_FSM_action_l96c57 or
	  WILL_FIRE_RL_hw_Manager_FSM_action_l100c33 or
	  WILL_FIRE_RL_hw_Manager_FSM_action_l110c41 or
	  WILL_FIRE_RL_hw_Manager_FSM_action_l115c65 or
	  MUX_o_server_CMDQ$enq_1__SEL_3 or
	  WILL_FIRE_RL_hw_Manager_FSM_action_l129c65)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_hw_Manager_FSM_state_mkFSMstate$write_1__SEL_1:
	  hw_Manager_FSM_state_mkFSMstate$D_IN = 4'd0;
      WILL_FIRE_RL_hw_Manager_FSM_action_l66c17:
	  hw_Manager_FSM_state_mkFSMstate$D_IN = 4'd1;
      WILL_FIRE_RL_hw_Manager_FSM_action_l71c17:
	  hw_Manager_FSM_state_mkFSMstate$D_IN = 4'd2;
      WILL_FIRE_RL_hw_Manager_FSM_action_l76c17:
	  hw_Manager_FSM_state_mkFSMstate$D_IN = 4'd3;
      WILL_FIRE_RL_hw_Manager_FSM_action_l82c46:
	  hw_Manager_FSM_state_mkFSMstate$D_IN = 4'd4;
      MUX_o_server_CMDQ$enq_1__SEL_2:
	  hw_Manager_FSM_state_mkFSMstate$D_IN = 4'd5;
      WILL_FIRE_RL_hw_Manager_FSM_action_l96c57:
	  hw_Manager_FSM_state_mkFSMstate$D_IN = 4'd6;
      WILL_FIRE_RL_hw_Manager_FSM_action_l100c33:
	  hw_Manager_FSM_state_mkFSMstate$D_IN = 4'd7;
      WILL_FIRE_RL_hw_Manager_FSM_action_l110c41:
	  hw_Manager_FSM_state_mkFSMstate$D_IN = 4'd8;
      WILL_FIRE_RL_hw_Manager_FSM_action_l115c65:
	  hw_Manager_FSM_state_mkFSMstate$D_IN = 4'd9;
      MUX_o_server_CMDQ$enq_1__SEL_3:
	  hw_Manager_FSM_state_mkFSMstate$D_IN = 4'd10;
      WILL_FIRE_RL_hw_Manager_FSM_action_l129c65:
	  hw_Manager_FSM_state_mkFSMstate$D_IN = 4'd11;
      default: hw_Manager_FSM_state_mkFSMstate$D_IN =
		   4'b1010 /* unspecified value */ ;
    endcase
  end
  assign hw_Manager_FSM_state_mkFSMstate$EN =
	     WILL_FIRE_RL_hw_Manager_FSM_idle_l64c31_6 ||
	     WILL_FIRE_RL_hw_Manager_FSM_idle_l64c31_5 ||
	     WILL_FIRE_RL_hw_Manager_FSM_idle_l64c31_4 ||
	     WILL_FIRE_RL_hw_Manager_FSM_idle_l64c31_3 ||
	     WILL_FIRE_RL_hw_Manager_FSM_idle_l64c31_2 ||
	     WILL_FIRE_RL_hw_Manager_FSM_idle_l64c31_1 ||
	     WILL_FIRE_RL_hw_Manager_FSM_idle_l64c31 ||
	     WILL_FIRE_RL_hw_Manager_FSM_action_l66c17 ||
	     WILL_FIRE_RL_hw_Manager_FSM_action_l71c17 ||
	     WILL_FIRE_RL_hw_Manager_FSM_action_l76c17 ||
	     WILL_FIRE_RL_hw_Manager_FSM_action_l82c46 ||
	     MUX_o_server_CMDQ$enq_1__SEL_2 ||
	     WILL_FIRE_RL_hw_Manager_FSM_action_l96c57 ||
	     WILL_FIRE_RL_hw_Manager_FSM_action_l100c33 ||
	     WILL_FIRE_RL_hw_Manager_FSM_action_l110c41 ||
	     WILL_FIRE_RL_hw_Manager_FSM_action_l115c65 ||
	     MUX_o_server_CMDQ$enq_1__SEL_3 ||
	     WILL_FIRE_RL_hw_Manager_FSM_action_l129c65 ;

  // register table_cmdq_cpu_0
  assign table_cmdq_cpu_0$D_IN = table_cmdq_cpu_1$D_IN ;
  assign table_cmdq_cpu_0$EN =
	     WILL_FIRE_RL_hw_Manager_FSM_action_l96c57 &&
	     bluetiles_header2[23:16] == 8'd0 ;

  // register table_cmdq_cpu_1
  assign table_cmdq_cpu_1$D_IN = { bluetiles_header1[31:16], 16'h0 } ;
  assign table_cmdq_cpu_1$EN =
	     WILL_FIRE_RL_hw_Manager_FSM_action_l96c57 &&
	     bluetiles_header2[23:16] == 8'd1 ;

  // register table_cmdq_cpu_2
  assign table_cmdq_cpu_2$D_IN = table_cmdq_cpu_1$D_IN ;
  assign table_cmdq_cpu_2$EN =
	     WILL_FIRE_RL_hw_Manager_FSM_action_l96c57 &&
	     bluetiles_header2[23:16] == 8'd2 ;

  // register table_cmdq_cpu_3
  assign table_cmdq_cpu_3$D_IN = table_cmdq_cpu_1$D_IN ;
  assign table_cmdq_cpu_3$EN =
	     WILL_FIRE_RL_hw_Manager_FSM_action_l96c57 &&
	     bluetiles_header2[23:16] == 8'd3 ;

  // register table_cmdq_cpu_4
  assign table_cmdq_cpu_4$D_IN = table_cmdq_cpu_1$D_IN ;
  assign table_cmdq_cpu_4$EN =
	     WILL_FIRE_RL_hw_Manager_FSM_action_l96c57 &&
	     bluetiles_header2[23:16] == 8'd4 ;

  // register table_cmdq_cpu_5
  assign table_cmdq_cpu_5$D_IN = table_cmdq_cpu_1$D_IN ;
  assign table_cmdq_cpu_5$EN =
	     WILL_FIRE_RL_hw_Manager_FSM_action_l96c57 &&
	     bluetiles_header2[23:16] == 8'd5 ;

  // register table_cmdq_cpu_6
  assign table_cmdq_cpu_6$D_IN = table_cmdq_cpu_1$D_IN ;
  assign table_cmdq_cpu_6$EN =
	     WILL_FIRE_RL_hw_Manager_FSM_action_l96c57 &&
	     bluetiles_header2[23:16] == 8'd6 ;

  // register table_cmdq_cpu_7
  assign table_cmdq_cpu_7$D_IN = table_cmdq_cpu_1$D_IN ;
  assign table_cmdq_cpu_7$EN =
	     WILL_FIRE_RL_hw_Manager_FSM_action_l96c57 &&
	     bluetiles_header2[23:16] == 8'd7 ;

  // register table_cmdq_cpu_8
  assign table_cmdq_cpu_8$D_IN = table_cmdq_cpu_1$D_IN ;
  assign table_cmdq_cpu_8$EN =
	     WILL_FIRE_RL_hw_Manager_FSM_action_l96c57 &&
	     bluetiles_header2[23:16] == 8'd8 ;

  // submodule i_client
  assign i_client$D_IN = bluetile_client_response_put ;
  assign i_client$ENQ = EN_bluetile_client_response_put ;
  assign i_client$DEQ =
	     WILL_FIRE_RL_hw_Manager_FSM_action_l129c65 ||
	     WILL_FIRE_RL_hw_Manager_FSM_action_l115c65 ||
	     WILL_FIRE_RL_hw_Manager_FSM_action_l100c33 ||
	     WILL_FIRE_RL_hw_Manager_FSM_action_l76c17 ||
	     WILL_FIRE_RL_hw_Manager_FSM_action_l71c17 ||
	     WILL_FIRE_RL_hw_Manager_FSM_action_l66c17 ;
  assign i_client$CLR = 1'b0 ;

  // submodule i_client_CMDQ
  assign i_client_CMDQ$D_IN = bluetile_client_CMDQ_response_put ;
  assign i_client_CMDQ$ENQ = EN_bluetile_client_CMDQ_response_put ;
  assign i_client_CMDQ$DEQ =
	     i_client_CMDQ$EMPTY_N &&
	     cmdq_FSM_start_wire_whas__91_AND_cmdq_FSM_star_ETC___d221 ;
  assign i_client_CMDQ$CLR = 1'b0 ;

  // submodule i_server_CMDPROCESSOR
  assign i_server_CMDPROCESSOR$D_IN =
	     bluetile_server_CMDPROCESSOR_request_put ;
  assign i_server_CMDPROCESSOR$ENQ =
	     EN_bluetile_server_CMDPROCESSOR_request_put ;
  assign i_server_CMDPROCESSOR$DEQ = 1'b0 ;
  assign i_server_CMDPROCESSOR$CLR = 1'b0 ;

  // submodule i_server_CMDQ
  assign i_server_CMDQ$D_IN = bluetile_server_CMDQ_request_put ;
  assign i_server_CMDQ$ENQ = EN_bluetile_server_CMDQ_request_put ;
  assign i_server_CMDQ$DEQ = 1'b0 ;
  assign i_server_CMDQ$CLR = 1'b0 ;

  // submodule i_server_SUBCMDCPU
  assign i_server_SUBCMDCPU$D_IN = bluetile_server_SUBCMDCPU_request_put ;
  assign i_server_SUBCMDCPU$ENQ = EN_bluetile_server_SUBCMDCPU_request_put ;
  assign i_server_SUBCMDCPU$DEQ = 1'b0 ;
  assign i_server_SUBCMDCPU$CLR = 1'b0 ;

  // submodule o_client
  assign o_client$D_IN =
	     WILL_FIRE_RL_cmdq_FSM_action_l150c25 ?
	       MUX_o_client$enq_1__VAL_1 :
	       MUX_o_client$enq_1__VAL_2 ;
  assign o_client$ENQ =
	     WILL_FIRE_RL_cmdq_FSM_action_l150c25 ||
	     WILL_FIRE_RL_cmdq_FSM_action_l148c25 ;
  assign o_client$DEQ = EN_bluetile_client_request_get ;
  assign o_client$CLR = 1'b0 ;

  // submodule o_client_CMDQ
  assign o_client_CMDQ$D_IN = 32'h0 ;
  assign o_client_CMDQ$ENQ = 1'b0 ;
  assign o_client_CMDQ$DEQ = EN_bluetile_client_CMDQ_request_get ;
  assign o_client_CMDQ$CLR = 1'b0 ;

  // submodule o_server_CMDPROCESSOR
  assign o_server_CMDPROCESSOR$D_IN = bluetiles_header2 ;
  assign o_server_CMDPROCESSOR$ENQ =
	     WILL_FIRE_RL_hw_Manager_FSM_action_l82c46 ;
  assign o_server_CMDPROCESSOR$DEQ =
	     EN_bluetile_server_CMDPROCESSOR_response_get ;
  assign o_server_CMDPROCESSOR$CLR = 1'b0 ;

  // submodule o_server_CMDQ
  always@(MUX_o_server_CMDQ$enq_1__SEL_1 or
	  i_client$D_OUT or
	  MUX_o_server_CMDQ$enq_1__SEL_2 or
	  bluetiles_header2 or
	  MUX_o_server_CMDQ$enq_1__SEL_3 or MUX_o_server_CMDQ$enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_o_server_CMDQ$enq_1__SEL_1: o_server_CMDQ$D_IN = i_client$D_OUT;
      MUX_o_server_CMDQ$enq_1__SEL_2: o_server_CMDQ$D_IN = bluetiles_header2;
      MUX_o_server_CMDQ$enq_1__SEL_3:
	  o_server_CMDQ$D_IN = MUX_o_server_CMDQ$enq_1__VAL_3;
      default: o_server_CMDQ$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign o_server_CMDQ$ENQ =
	     WILL_FIRE_RL_hw_Manager_FSM_action_l129c65 ||
	     WILL_FIRE_RL_hw_Manager_FSM_action_l100c33 ||
	     MUX_o_server_CMDQ$enq_1__SEL_2 ||
	     MUX_o_server_CMDQ$enq_1__SEL_3 ;
  assign o_server_CMDQ$DEQ = EN_bluetile_server_CMDQ_response_get ;
  assign o_server_CMDQ$CLR = 1'b0 ;

  // submodule o_server_SUBCMDCPU
  assign o_server_SUBCMDCPU$D_IN =
	     WILL_FIRE_RL_hw_Manager_FSM_action_l115c65 ?
	       i_client$D_OUT :
	       MUX_o_server_SUBCMDCPU$enq_1__VAL_2 ;
  assign o_server_SUBCMDCPU$ENQ =
	     WILL_FIRE_RL_hw_Manager_FSM_action_l115c65 ||
	     WILL_FIRE_RL_hw_Manager_FSM_action_l110c41 ;
  assign o_server_SUBCMDCPU$DEQ = EN_bluetile_server_SUBCMDCPU_response_get ;
  assign o_server_SUBCMDCPU$CLR = 1'b0 ;

  // remaining internal signals
  assign NOT_bluetiles_header2_8_BITS_31_TO_24_9_EQ_0xD_ETC___d63 =
	     bluetiles_header2[31:24] != 8'hDD &&
	     bluetiles_header2[31:24] != 8'hAA &&
	     bluetiles_header2[31:24] != 8'hCC &&
	     bluetiles_header2[31:24] != 8'hBB &&
	     bluetiles_header2[31:24] != 8'hFF &&
	     bluetiles_header2[31:24] != 8'hEE &&
	     bluetiles_header2[31:24] != 8'h0 &&
	     hw_Manager_FSM_start_wire$whas &&
	     hw_Manager_FSM_state_mkFSMstate == 4'd3 ;
  assign cmdq_FSM_abort_whas__88_AND_cmdq_FSM_abort_wge_ETC___d268 =
	     (cmdq_FSM_state_mkFSMstate == 3'd0 ||
	      cmdq_FSM_state_mkFSMstate == 3'd3) &&
	     (!cmdq_FSM_start_reg_1 || cmdq_FSM_state_fired) ;
  assign cmdq_FSM_start_wire_whas__91_AND_cmdq_FSM_star_ETC___d221 =
	     cmdq_FSM_start_wire$whas &&
	     (cmdq_FSM_state_mkFSMstate == 3'd0 ||
	      cmdq_FSM_state_mkFSMstate == 3'd3) ;
  assign counter_FF_1_EQ_0_2_AND_NOT_bluetiles_header2__ETC___d178 =
	     counter_FF == 8'd0 && bluetiles_header2[31:24] != 8'h0 &&
	     (hw_Manager_FSM_state_mkFSMstate == 4'd8 ||
	      hw_Manager_FSM_state_mkFSMstate == 4'd9) ||
	     counter_00 == 8'd0 &&
	     (hw_Manager_FSM_state_mkFSMstate == 4'd10 ||
	      hw_Manager_FSM_state_mkFSMstate == 4'd11) ;
  assign hw_Manager_FSM_abort_whas_AND_hw_Manager_FSM_a_ETC___d182 =
	     (hw_Manager_FSM_state_mkFSMstate == 4'd0 ||
	      bluetiles_header2[31:24] != 8'hDD &&
	      bluetiles_header2[31:24] != 8'hAA &&
	      bluetiles_header2[31:24] != 8'hCC &&
	      bluetiles_header2[31:24] != 8'hBB &&
	      bluetiles_header2[31:24] != 8'hFF &&
	      bluetiles_header2[31:24] != 8'hEE &&
	      bluetiles_header2[31:24] != 8'h0 &&
	      hw_Manager_FSM_state_mkFSMstate == 4'd3 ||
	      hw_Manager_FSM_state_mkFSMstate == 4'd4 ||
	      hw_Manager_FSM_state_mkFSMstate == 4'd7 ||
	      counter_FF_1_EQ_0_2_AND_NOT_bluetiles_header2__ETC___d178) &&
	     (!hw_Manager_FSM_start_reg_1 || hw_Manager_FSM_state_fired) ;
  assign hw_Manager_FSM_start_wire_whas_AND_hw_Manager__ETC___d89 =
	     hw_Manager_FSM_start_wire$whas &&
	     hw_Manager_FSM_state_mkFSMstate == 4'd0 ||
	     NOT_bluetiles_header2_8_BITS_31_TO_24_9_EQ_0xD_ETC___d63 ||
	     hw_Manager_FSM_start_wire$whas &&
	     (hw_Manager_FSM_state_mkFSMstate == 4'd4 ||
	      hw_Manager_FSM_state_mkFSMstate == 4'd7) ||
	     counter_FF == 8'd0 && bluetiles_header2[31:24] != 8'h0 &&
	     hw_Manager_FSM_start_wire$whas &&
	     (hw_Manager_FSM_state_mkFSMstate == 4'd8 ||
	      hw_Manager_FSM_state_mkFSMstate == 4'd9) ||
	     counter_00 == 8'd0 && hw_Manager_FSM_start_wire$whas &&
	     (hw_Manager_FSM_state_mkFSMstate == 4'd10 ||
	      hw_Manager_FSM_state_mkFSMstate == 4'd11) ;
  always@(cmdq_header0 or
	  table_cmdq_cpu_8 or
	  table_cmdq_cpu_0 or
	  table_cmdq_cpu_1 or
	  table_cmdq_cpu_2 or
	  table_cmdq_cpu_3 or
	  table_cmdq_cpu_4 or
	  table_cmdq_cpu_5 or table_cmdq_cpu_6 or table_cmdq_cpu_7)
  begin
    case (cmdq_header0[31:24])
      8'd0:
	  CASE_cmdq_header0_BITS_31_TO_24_table_cmdq_cpu_ETC__q1 =
	      table_cmdq_cpu_0;
      8'd1:
	  CASE_cmdq_header0_BITS_31_TO_24_table_cmdq_cpu_ETC__q1 =
	      table_cmdq_cpu_1;
      8'd2:
	  CASE_cmdq_header0_BITS_31_TO_24_table_cmdq_cpu_ETC__q1 =
	      table_cmdq_cpu_2;
      8'd3:
	  CASE_cmdq_header0_BITS_31_TO_24_table_cmdq_cpu_ETC__q1 =
	      table_cmdq_cpu_3;
      8'd4:
	  CASE_cmdq_header0_BITS_31_TO_24_table_cmdq_cpu_ETC__q1 =
	      table_cmdq_cpu_4;
      8'd5:
	  CASE_cmdq_header0_BITS_31_TO_24_table_cmdq_cpu_ETC__q1 =
	      table_cmdq_cpu_5;
      8'd6:
	  CASE_cmdq_header0_BITS_31_TO_24_table_cmdq_cpu_ETC__q1 =
	      table_cmdq_cpu_6;
      8'd7:
	  CASE_cmdq_header0_BITS_31_TO_24_table_cmdq_cpu_ETC__q1 =
	      table_cmdq_cpu_7;
      default: CASE_cmdq_header0_BITS_31_TO_24_table_cmdq_cpu_ETC__q1 =
		   table_cmdq_cpu_8;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        bluetiles_header0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	bluetiles_header1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	bluetiles_header2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cmdq_FSM_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cmdq_FSM_start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cmdq_FSM_state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	cmdq_FSM_state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cmdq_FSM_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cmdq_header0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	counter_00 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	counter_FF <= `BSV_ASSIGNMENT_DELAY 8'd0;
	hw_Manager_FSM_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	hw_Manager_FSM_start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	hw_Manager_FSM_state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	hw_Manager_FSM_state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	hw_Manager_FSM_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 4'd0;
	table_cmdq_cpu_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	table_cmdq_cpu_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	table_cmdq_cpu_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	table_cmdq_cpu_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	table_cmdq_cpu_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	table_cmdq_cpu_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	table_cmdq_cpu_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	table_cmdq_cpu_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	table_cmdq_cpu_8 <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (bluetiles_header0$EN)
	  bluetiles_header0 <= `BSV_ASSIGNMENT_DELAY bluetiles_header0$D_IN;
	if (bluetiles_header1$EN)
	  bluetiles_header1 <= `BSV_ASSIGNMENT_DELAY bluetiles_header1$D_IN;
	if (bluetiles_header2$EN)
	  bluetiles_header2 <= `BSV_ASSIGNMENT_DELAY bluetiles_header2$D_IN;
	if (cmdq_FSM_start_reg$EN)
	  cmdq_FSM_start_reg <= `BSV_ASSIGNMENT_DELAY cmdq_FSM_start_reg$D_IN;
	if (cmdq_FSM_start_reg_1$EN)
	  cmdq_FSM_start_reg_1 <= `BSV_ASSIGNMENT_DELAY
	      cmdq_FSM_start_reg_1$D_IN;
	if (cmdq_FSM_state_can_overlap$EN)
	  cmdq_FSM_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      cmdq_FSM_state_can_overlap$D_IN;
	if (cmdq_FSM_state_fired$EN)
	  cmdq_FSM_state_fired <= `BSV_ASSIGNMENT_DELAY
	      cmdq_FSM_state_fired$D_IN;
	if (cmdq_FSM_state_mkFSMstate$EN)
	  cmdq_FSM_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      cmdq_FSM_state_mkFSMstate$D_IN;
	if (cmdq_header0$EN)
	  cmdq_header0 <= `BSV_ASSIGNMENT_DELAY cmdq_header0$D_IN;
	if (counter_00$EN)
	  counter_00 <= `BSV_ASSIGNMENT_DELAY counter_00$D_IN;
	if (counter_FF$EN)
	  counter_FF <= `BSV_ASSIGNMENT_DELAY counter_FF$D_IN;
	if (hw_Manager_FSM_start_reg$EN)
	  hw_Manager_FSM_start_reg <= `BSV_ASSIGNMENT_DELAY
	      hw_Manager_FSM_start_reg$D_IN;
	if (hw_Manager_FSM_start_reg_1$EN)
	  hw_Manager_FSM_start_reg_1 <= `BSV_ASSIGNMENT_DELAY
	      hw_Manager_FSM_start_reg_1$D_IN;
	if (hw_Manager_FSM_state_can_overlap$EN)
	  hw_Manager_FSM_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      hw_Manager_FSM_state_can_overlap$D_IN;
	if (hw_Manager_FSM_state_fired$EN)
	  hw_Manager_FSM_state_fired <= `BSV_ASSIGNMENT_DELAY
	      hw_Manager_FSM_state_fired$D_IN;
	if (hw_Manager_FSM_state_mkFSMstate$EN)
	  hw_Manager_FSM_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      hw_Manager_FSM_state_mkFSMstate$D_IN;
	if (table_cmdq_cpu_0$EN)
	  table_cmdq_cpu_0 <= `BSV_ASSIGNMENT_DELAY table_cmdq_cpu_0$D_IN;
	if (table_cmdq_cpu_1$EN)
	  table_cmdq_cpu_1 <= `BSV_ASSIGNMENT_DELAY table_cmdq_cpu_1$D_IN;
	if (table_cmdq_cpu_2$EN)
	  table_cmdq_cpu_2 <= `BSV_ASSIGNMENT_DELAY table_cmdq_cpu_2$D_IN;
	if (table_cmdq_cpu_3$EN)
	  table_cmdq_cpu_3 <= `BSV_ASSIGNMENT_DELAY table_cmdq_cpu_3$D_IN;
	if (table_cmdq_cpu_4$EN)
	  table_cmdq_cpu_4 <= `BSV_ASSIGNMENT_DELAY table_cmdq_cpu_4$D_IN;
	if (table_cmdq_cpu_5$EN)
	  table_cmdq_cpu_5 <= `BSV_ASSIGNMENT_DELAY table_cmdq_cpu_5$D_IN;
	if (table_cmdq_cpu_6$EN)
	  table_cmdq_cpu_6 <= `BSV_ASSIGNMENT_DELAY table_cmdq_cpu_6$D_IN;
	if (table_cmdq_cpu_7$EN)
	  table_cmdq_cpu_7 <= `BSV_ASSIGNMENT_DELAY table_cmdq_cpu_7$D_IN;
	if (table_cmdq_cpu_8$EN)
	  table_cmdq_cpu_8 <= `BSV_ASSIGNMENT_DELAY table_cmdq_cpu_8$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    bluetiles_header0 = 32'hAAAAAAAA;
    bluetiles_header1 = 32'hAAAAAAAA;
    bluetiles_header2 = 32'hAAAAAAAA;
    cmdq_FSM_start_reg = 1'h0;
    cmdq_FSM_start_reg_1 = 1'h0;
    cmdq_FSM_state_can_overlap = 1'h0;
    cmdq_FSM_state_fired = 1'h0;
    cmdq_FSM_state_mkFSMstate = 3'h2;
    cmdq_header0 = 32'hAAAAAAAA;
    counter_00 = 8'hAA;
    counter_FF = 8'hAA;
    hw_Manager_FSM_start_reg = 1'h0;
    hw_Manager_FSM_start_reg_1 = 1'h0;
    hw_Manager_FSM_state_can_overlap = 1'h0;
    hw_Manager_FSM_state_fired = 1'h0;
    hw_Manager_FSM_state_mkFSMstate = 4'hA;
    table_cmdq_cpu_0 = 32'hAAAAAAAA;
    table_cmdq_cpu_1 = 32'hAAAAAAAA;
    table_cmdq_cpu_2 = 32'hAAAAAAAA;
    table_cmdq_cpu_3 = 32'hAAAAAAAA;
    table_cmdq_cpu_4 = 32'hAAAAAAAA;
    table_cmdq_cpu_5 = 32'hAAAAAAAA;
    table_cmdq_cpu_6 = 32'hAAAAAAAA;
    table_cmdq_cpu_7 = 32'hAAAAAAAA;
    table_cmdq_cpu_8 = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N)
      if (WILL_FIRE_RL_hw_Manager_FSM_action_l100c33 &&
	  (WILL_FIRE_RL_hw_Manager_FSM_action_l110c41 ||
	   WILL_FIRE_RL_hw_Manager_FSM_action_l115c65 ||
	   MUX_o_server_CMDQ$enq_1__SEL_3 ||
	   WILL_FIRE_RL_hw_Manager_FSM_action_l129c65))
	$display("Error: \"..//GPIOCMD_hw_manager.bsv\", line 100, column 33: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_hw_Manager_FSM_action_l100c33] and [RL_hw_Manager_FSM_action_l110c41,\n  RL_hw_Manager_FSM_action_l115c65, RL_hw_Manager_FSM_action_l124c41,\n  RL_hw_Manager_FSM_action_l129c65] ) fired in the same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_hw_Manager_FSM_action_l110c41 &&
	  (WILL_FIRE_RL_hw_Manager_FSM_action_l115c65 ||
	   MUX_o_server_CMDQ$enq_1__SEL_3 ||
	   WILL_FIRE_RL_hw_Manager_FSM_action_l129c65))
	$display("Error: \"..//GPIOCMD_hw_manager.bsv\", line 110, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_hw_Manager_FSM_action_l110c41] and [RL_hw_Manager_FSM_action_l115c65,\n  RL_hw_Manager_FSM_action_l124c41, RL_hw_Manager_FSM_action_l129c65] ) fired\n  in the same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_hw_Manager_FSM_action_l115c65 &&
	  (MUX_o_server_CMDQ$enq_1__SEL_3 ||
	   WILL_FIRE_RL_hw_Manager_FSM_action_l129c65))
	$display("Error: \"..//GPIOCMD_hw_manager.bsv\", line 115, column 65: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_hw_Manager_FSM_action_l115c65] and [RL_hw_Manager_FSM_action_l124c41,\n  RL_hw_Manager_FSM_action_l129c65] ) fired in the same clock cycle.\n");
    if (RST_N)
      if (MUX_o_server_CMDQ$enq_1__SEL_3 &&
	  WILL_FIRE_RL_hw_Manager_FSM_action_l129c65)
	$display("Error: \"..//GPIOCMD_hw_manager.bsv\", line 124, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_hw_Manager_FSM_action_l124c41] and [RL_hw_Manager_FSM_action_l129c65] )\n  fired in the same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_hw_Manager_FSM_action_l66c17 &&
	  (WILL_FIRE_RL_hw_Manager_FSM_action_l71c17 ||
	   WILL_FIRE_RL_hw_Manager_FSM_action_l76c17 ||
	   WILL_FIRE_RL_hw_Manager_FSM_action_l82c46 ||
	   MUX_o_server_CMDQ$enq_1__SEL_2 ||
	   WILL_FIRE_RL_hw_Manager_FSM_action_l96c57 ||
	   WILL_FIRE_RL_hw_Manager_FSM_action_l100c33 ||
	   WILL_FIRE_RL_hw_Manager_FSM_action_l110c41 ||
	   WILL_FIRE_RL_hw_Manager_FSM_action_l115c65 ||
	   MUX_o_server_CMDQ$enq_1__SEL_3 ||
	   WILL_FIRE_RL_hw_Manager_FSM_action_l129c65))
	$display("Error: \"..//GPIOCMD_hw_manager.bsv\", line 66, column 17: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_hw_Manager_FSM_action_l66c17]\n  and [RL_hw_Manager_FSM_action_l71c17, RL_hw_Manager_FSM_action_l76c17,\n  RL_hw_Manager_FSM_action_l82c46, RL_hw_Manager_FSM_action_l94c46,\n  RL_hw_Manager_FSM_action_l96c57, RL_hw_Manager_FSM_action_l100c33,\n  RL_hw_Manager_FSM_action_l110c41, RL_hw_Manager_FSM_action_l115c65,\n  RL_hw_Manager_FSM_action_l124c41, RL_hw_Manager_FSM_action_l129c65] ) fired\n  in the same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_hw_Manager_FSM_action_l71c17 &&
	  (WILL_FIRE_RL_hw_Manager_FSM_action_l76c17 ||
	   WILL_FIRE_RL_hw_Manager_FSM_action_l82c46 ||
	   MUX_o_server_CMDQ$enq_1__SEL_2 ||
	   WILL_FIRE_RL_hw_Manager_FSM_action_l96c57 ||
	   WILL_FIRE_RL_hw_Manager_FSM_action_l100c33 ||
	   WILL_FIRE_RL_hw_Manager_FSM_action_l110c41 ||
	   WILL_FIRE_RL_hw_Manager_FSM_action_l115c65 ||
	   MUX_o_server_CMDQ$enq_1__SEL_3 ||
	   WILL_FIRE_RL_hw_Manager_FSM_action_l129c65))
	$display("Error: \"..//GPIOCMD_hw_manager.bsv\", line 71, column 17: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_hw_Manager_FSM_action_l71c17]\n  and [RL_hw_Manager_FSM_action_l76c17, RL_hw_Manager_FSM_action_l82c46,\n  RL_hw_Manager_FSM_action_l94c46, RL_hw_Manager_FSM_action_l96c57,\n  RL_hw_Manager_FSM_action_l100c33, RL_hw_Manager_FSM_action_l110c41,\n  RL_hw_Manager_FSM_action_l115c65, RL_hw_Manager_FSM_action_l124c41,\n  RL_hw_Manager_FSM_action_l129c65] ) fired in the same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_hw_Manager_FSM_action_l76c17 &&
	  (WILL_FIRE_RL_hw_Manager_FSM_action_l82c46 ||
	   MUX_o_server_CMDQ$enq_1__SEL_2 ||
	   WILL_FIRE_RL_hw_Manager_FSM_action_l96c57 ||
	   WILL_FIRE_RL_hw_Manager_FSM_action_l100c33 ||
	   WILL_FIRE_RL_hw_Manager_FSM_action_l110c41 ||
	   WILL_FIRE_RL_hw_Manager_FSM_action_l115c65 ||
	   MUX_o_server_CMDQ$enq_1__SEL_3 ||
	   WILL_FIRE_RL_hw_Manager_FSM_action_l129c65))
	$display("Error: \"..//GPIOCMD_hw_manager.bsv\", line 76, column 17: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_hw_Manager_FSM_action_l76c17]\n  and [RL_hw_Manager_FSM_action_l82c46, RL_hw_Manager_FSM_action_l94c46,\n  RL_hw_Manager_FSM_action_l96c57, RL_hw_Manager_FSM_action_l100c33,\n  RL_hw_Manager_FSM_action_l110c41, RL_hw_Manager_FSM_action_l115c65,\n  RL_hw_Manager_FSM_action_l124c41, RL_hw_Manager_FSM_action_l129c65] ) fired\n  in the same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_hw_Manager_FSM_action_l82c46 &&
	  (MUX_o_server_CMDQ$enq_1__SEL_2 ||
	   WILL_FIRE_RL_hw_Manager_FSM_action_l96c57 ||
	   WILL_FIRE_RL_hw_Manager_FSM_action_l100c33 ||
	   WILL_FIRE_RL_hw_Manager_FSM_action_l110c41 ||
	   WILL_FIRE_RL_hw_Manager_FSM_action_l115c65 ||
	   MUX_o_server_CMDQ$enq_1__SEL_3 ||
	   WILL_FIRE_RL_hw_Manager_FSM_action_l129c65))
	$display("Error: \"..//GPIOCMD_hw_manager.bsv\", line 82, column 46: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_hw_Manager_FSM_action_l82c46]\n  and [RL_hw_Manager_FSM_action_l94c46, RL_hw_Manager_FSM_action_l96c57,\n  RL_hw_Manager_FSM_action_l100c33, RL_hw_Manager_FSM_action_l110c41,\n  RL_hw_Manager_FSM_action_l115c65, RL_hw_Manager_FSM_action_l124c41,\n  RL_hw_Manager_FSM_action_l129c65] ) fired in the same clock cycle.\n");
    if (RST_N)
      if (MUX_o_server_CMDQ$enq_1__SEL_2 &&
	  (WILL_FIRE_RL_hw_Manager_FSM_action_l96c57 ||
	   WILL_FIRE_RL_hw_Manager_FSM_action_l100c33 ||
	   WILL_FIRE_RL_hw_Manager_FSM_action_l110c41 ||
	   WILL_FIRE_RL_hw_Manager_FSM_action_l115c65 ||
	   MUX_o_server_CMDQ$enq_1__SEL_3 ||
	   WILL_FIRE_RL_hw_Manager_FSM_action_l129c65))
	$display("Error: \"..//GPIOCMD_hw_manager.bsv\", line 94, column 46: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_hw_Manager_FSM_action_l94c46]\n  and [RL_hw_Manager_FSM_action_l96c57, RL_hw_Manager_FSM_action_l100c33,\n  RL_hw_Manager_FSM_action_l110c41, RL_hw_Manager_FSM_action_l115c65,\n  RL_hw_Manager_FSM_action_l124c41, RL_hw_Manager_FSM_action_l129c65] ) fired\n  in the same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_hw_Manager_FSM_action_l96c57 &&
	  (WILL_FIRE_RL_hw_Manager_FSM_action_l100c33 ||
	   WILL_FIRE_RL_hw_Manager_FSM_action_l110c41 ||
	   WILL_FIRE_RL_hw_Manager_FSM_action_l115c65 ||
	   MUX_o_server_CMDQ$enq_1__SEL_3 ||
	   WILL_FIRE_RL_hw_Manager_FSM_action_l129c65))
	$display("Error: \"..//GPIOCMD_hw_manager.bsv\", line 96, column 57: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_hw_Manager_FSM_action_l96c57]\n  and [RL_hw_Manager_FSM_action_l100c33, RL_hw_Manager_FSM_action_l110c41,\n  RL_hw_Manager_FSM_action_l115c65, RL_hw_Manager_FSM_action_l124c41,\n  RL_hw_Manager_FSM_action_l129c65] ) fired in the same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_cmdq_FSM_action_l148c25 &&
	  WILL_FIRE_RL_cmdq_FSM_action_l150c25)
	$display("Error: \"..//GPIOCMD_hw_manager.bsv\", line 148, column 25: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cmdq_FSM_action_l148c25] and\n  [RL_cmdq_FSM_action_l150c25] ) fired in the same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_cmdq_FSM_action_l142c17 &&
	  (WILL_FIRE_RL_cmdq_FSM_action_l148c25 ||
	   WILL_FIRE_RL_cmdq_FSM_action_l150c25))
	$display("Error: \"..//GPIOCMD_hw_manager.bsv\", line 142, column 17: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cmdq_FSM_action_l142c17] and\n  [RL_cmdq_FSM_action_l148c25, RL_cmdq_FSM_action_l150c25] ) fired in the same\n  clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkGPIOCMD_hw_manager

