//
// Generated by Bluespec Compiler, version 2012.01.A (build 26572, 2012-01-17)
//
// On Tue Jun 28 13:54:56 BST 2016
//
// Method conflict info:
// Method: bluetile_client_SUBCMDCPU_request_get
// Conflict-free: bluetile_client_SUBCMDCPU_response_put,
// 	       bluetile_client_CMDQ_request_get,
// 	       bluetile_client_CMDQ_response_put,
// 	       bluetile_server_CMDQ_request_put,
// 	       bluetile_server_CMDQ_response_get
// Conflicts: bluetile_client_SUBCMDCPU_request_get
//
// Method: bluetile_client_SUBCMDCPU_response_put
// Conflict-free: bluetile_client_SUBCMDCPU_request_get,
// 	       bluetile_client_CMDQ_request_get,
// 	       bluetile_client_CMDQ_response_put,
// 	       bluetile_server_CMDQ_request_put,
// 	       bluetile_server_CMDQ_response_get
// Conflicts: bluetile_client_SUBCMDCPU_response_put
//
// Method: bluetile_client_CMDQ_request_get
// Conflict-free: bluetile_client_SUBCMDCPU_request_get,
// 	       bluetile_client_SUBCMDCPU_response_put,
// 	       bluetile_client_CMDQ_response_put,
// 	       bluetile_server_CMDQ_request_put,
// 	       bluetile_server_CMDQ_response_get
// Conflicts: bluetile_client_CMDQ_request_get
//
// Method: bluetile_client_CMDQ_response_put
// Conflict-free: bluetile_client_SUBCMDCPU_request_get,
// 	       bluetile_client_SUBCMDCPU_response_put,
// 	       bluetile_client_CMDQ_request_get,
// 	       bluetile_server_CMDQ_request_put,
// 	       bluetile_server_CMDQ_response_get
// Conflicts: bluetile_client_CMDQ_response_put
//
// Method: bluetile_server_CMDQ_request_put
// Conflict-free: bluetile_client_SUBCMDCPU_request_get,
// 	       bluetile_client_SUBCMDCPU_response_put,
// 	       bluetile_client_CMDQ_request_get,
// 	       bluetile_client_CMDQ_response_put,
// 	       bluetile_server_CMDQ_response_get
// Conflicts: bluetile_server_CMDQ_request_put
//
// Method: bluetile_server_CMDQ_response_get
// Conflict-free: bluetile_client_SUBCMDCPU_request_get,
// 	       bluetile_client_SUBCMDCPU_response_put,
// 	       bluetile_client_CMDQ_request_get,
// 	       bluetile_client_CMDQ_response_put,
// 	       bluetile_server_CMDQ_request_put
// Conflicts: bluetile_server_CMDQ_response_get
//
//
// Ports:
// Name                         I/O  size props
// bluetile_client_SUBCMDCPU_request_get  O    32 reg
// RDY_bluetile_client_SUBCMDCPU_request_get  O     1 reg
// RDY_bluetile_client_SUBCMDCPU_response_put  O     1 reg
// bluetile_client_CMDQ_request_get  O    32 reg
// RDY_bluetile_client_CMDQ_request_get  O     1 reg
// RDY_bluetile_client_CMDQ_response_put  O     1 reg
// RDY_bluetile_server_CMDQ_request_put  O     1 reg
// bluetile_server_CMDQ_response_get  O    32 reg
// RDY_bluetile_server_CMDQ_response_get  O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// bluetile_client_SUBCMDCPU_response_put  I    32 reg
// bluetile_client_CMDQ_response_put  I    32 reg
// bluetile_server_CMDQ_request_put  I    32 reg
// EN_bluetile_client_SUBCMDCPU_response_put  I     1
// EN_bluetile_client_CMDQ_response_put  I     1
// EN_bluetile_server_CMDQ_request_put  I     1
// EN_bluetile_client_SUBCMDCPU_request_get  I     1
// EN_bluetile_client_CMDQ_request_get  I     1
// EN_bluetile_server_CMDQ_response_get  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkGPIOCMD_cmd_memory(CLK,
			    RST_N,

			    EN_bluetile_client_SUBCMDCPU_request_get,
			    bluetile_client_SUBCMDCPU_request_get,
			    RDY_bluetile_client_SUBCMDCPU_request_get,

			    bluetile_client_SUBCMDCPU_response_put,
			    EN_bluetile_client_SUBCMDCPU_response_put,
			    RDY_bluetile_client_SUBCMDCPU_response_put,

			    EN_bluetile_client_CMDQ_request_get,
			    bluetile_client_CMDQ_request_get,
			    RDY_bluetile_client_CMDQ_request_get,

			    bluetile_client_CMDQ_response_put,
			    EN_bluetile_client_CMDQ_response_put,
			    RDY_bluetile_client_CMDQ_response_put,

			    bluetile_server_CMDQ_request_put,
			    EN_bluetile_server_CMDQ_request_put,
			    RDY_bluetile_server_CMDQ_request_put,

			    EN_bluetile_server_CMDQ_response_get,
			    bluetile_server_CMDQ_response_get,
			    RDY_bluetile_server_CMDQ_response_get);
  input  CLK;
  input  RST_N;

  // actionvalue method bluetile_client_SUBCMDCPU_request_get
  input  EN_bluetile_client_SUBCMDCPU_request_get;
  output [31 : 0] bluetile_client_SUBCMDCPU_request_get;
  output RDY_bluetile_client_SUBCMDCPU_request_get;

  // action method bluetile_client_SUBCMDCPU_response_put
  input  [31 : 0] bluetile_client_SUBCMDCPU_response_put;
  input  EN_bluetile_client_SUBCMDCPU_response_put;
  output RDY_bluetile_client_SUBCMDCPU_response_put;

  // actionvalue method bluetile_client_CMDQ_request_get
  input  EN_bluetile_client_CMDQ_request_get;
  output [31 : 0] bluetile_client_CMDQ_request_get;
  output RDY_bluetile_client_CMDQ_request_get;

  // action method bluetile_client_CMDQ_response_put
  input  [31 : 0] bluetile_client_CMDQ_response_put;
  input  EN_bluetile_client_CMDQ_response_put;
  output RDY_bluetile_client_CMDQ_response_put;

  // action method bluetile_server_CMDQ_request_put
  input  [31 : 0] bluetile_server_CMDQ_request_put;
  input  EN_bluetile_server_CMDQ_request_put;
  output RDY_bluetile_server_CMDQ_request_put;

  // actionvalue method bluetile_server_CMDQ_response_get
  input  EN_bluetile_server_CMDQ_response_get;
  output [31 : 0] bluetile_server_CMDQ_response_get;
  output RDY_bluetile_server_CMDQ_response_get;

  // signals for module outputs
  wire [31 : 0] bluetile_client_CMDQ_request_get,
		bluetile_client_SUBCMDCPU_request_get,
		bluetile_server_CMDQ_response_get;
  wire RDY_bluetile_client_CMDQ_request_get,
       RDY_bluetile_client_CMDQ_response_put,
       RDY_bluetile_client_SUBCMDCPU_request_get,
       RDY_bluetile_client_SUBCMDCPU_response_put,
       RDY_bluetile_server_CMDQ_request_put,
       RDY_bluetile_server_CMDQ_response_get;

  // inlined wires
  wire [31 : 0] cmd_memory_serverAdapterB_outData_outData$wget;
  wire cmd_memory_serverAdapterA_outData_enqData$whas,
       cmd_memory_serverAdapterA_writeWithResp$whas,
       cmd_memory_serverAdapterB_outData_deqCalled$whas,
       cmd_memory_serverAdapterB_outData_enqData$whas,
       cmd_memory_serverAdapterB_outData_outData$whas,
       fsm_cmd_mem_output_FSM_start_wire$whas,
       fsm_cmd_mem_output_FSM_state_set_pw$whas,
       fsm_cmd_mem_update_FSM_start_wire$whas,
       fsm_cmd_mem_update_FSM_state_set_pw$whas;

  // register cmd_memory_serverAdapterA_cnt
  reg [2 : 0] cmd_memory_serverAdapterA_cnt;
  wire [2 : 0] cmd_memory_serverAdapterA_cnt$D_IN;
  wire cmd_memory_serverAdapterA_cnt$EN;

  // register cmd_memory_serverAdapterA_s1
  reg [1 : 0] cmd_memory_serverAdapterA_s1;
  wire [1 : 0] cmd_memory_serverAdapterA_s1$D_IN;
  wire cmd_memory_serverAdapterA_s1$EN;

  // register cmd_memory_serverAdapterB_cnt
  reg [2 : 0] cmd_memory_serverAdapterB_cnt;
  wire [2 : 0] cmd_memory_serverAdapterB_cnt$D_IN;
  wire cmd_memory_serverAdapterB_cnt$EN;

  // register cmd_memory_serverAdapterB_s1
  reg [1 : 0] cmd_memory_serverAdapterB_s1;
  wire [1 : 0] cmd_memory_serverAdapterB_s1$D_IN;
  wire cmd_memory_serverAdapterB_s1$EN;

  // register crnt_subcmd_SUBCMDCPU
  reg [31 : 0] crnt_subcmd_SUBCMDCPU;
  wire [31 : 0] crnt_subcmd_SUBCMDCPU$D_IN;
  wire crnt_subcmd_SUBCMDCPU$EN;

  // register crnt_subcmd_SUBQ
  reg [31 : 0] crnt_subcmd_SUBQ;
  wire [31 : 0] crnt_subcmd_SUBQ$D_IN;
  wire crnt_subcmd_SUBQ$EN;

  // register fsm_cmd_mem_output_FSM_start_reg
  reg fsm_cmd_mem_output_FSM_start_reg;
  wire fsm_cmd_mem_output_FSM_start_reg$D_IN,
       fsm_cmd_mem_output_FSM_start_reg$EN;

  // register fsm_cmd_mem_output_FSM_start_reg_1
  reg fsm_cmd_mem_output_FSM_start_reg_1;
  wire fsm_cmd_mem_output_FSM_start_reg_1$D_IN,
       fsm_cmd_mem_output_FSM_start_reg_1$EN;

  // register fsm_cmd_mem_output_FSM_state_can_overlap
  reg fsm_cmd_mem_output_FSM_state_can_overlap;
  wire fsm_cmd_mem_output_FSM_state_can_overlap$D_IN,
       fsm_cmd_mem_output_FSM_state_can_overlap$EN;

  // register fsm_cmd_mem_output_FSM_state_fired
  reg fsm_cmd_mem_output_FSM_state_fired;
  wire fsm_cmd_mem_output_FSM_state_fired$D_IN,
       fsm_cmd_mem_output_FSM_state_fired$EN;

  // register fsm_cmd_mem_output_FSM_state_mkFSMstate
  reg [3 : 0] fsm_cmd_mem_output_FSM_state_mkFSMstate;
  reg [3 : 0] fsm_cmd_mem_output_FSM_state_mkFSMstate$D_IN;
  wire fsm_cmd_mem_output_FSM_state_mkFSMstate$EN;

  // register fsm_cmd_mem_update_FSM_start_reg
  reg fsm_cmd_mem_update_FSM_start_reg;
  wire fsm_cmd_mem_update_FSM_start_reg$D_IN,
       fsm_cmd_mem_update_FSM_start_reg$EN;

  // register fsm_cmd_mem_update_FSM_start_reg_1
  reg fsm_cmd_mem_update_FSM_start_reg_1;
  wire fsm_cmd_mem_update_FSM_start_reg_1$D_IN,
       fsm_cmd_mem_update_FSM_start_reg_1$EN;

  // register fsm_cmd_mem_update_FSM_state_can_overlap
  reg fsm_cmd_mem_update_FSM_state_can_overlap;
  wire fsm_cmd_mem_update_FSM_state_can_overlap$D_IN,
       fsm_cmd_mem_update_FSM_state_can_overlap$EN;

  // register fsm_cmd_mem_update_FSM_state_fired
  reg fsm_cmd_mem_update_FSM_state_fired;
  wire fsm_cmd_mem_update_FSM_state_fired$D_IN,
       fsm_cmd_mem_update_FSM_state_fired$EN;

  // register fsm_cmd_mem_update_FSM_state_mkFSMstate
  reg [2 : 0] fsm_cmd_mem_update_FSM_state_mkFSMstate;
  reg [2 : 0] fsm_cmd_mem_update_FSM_state_mkFSMstate$D_IN;
  wire fsm_cmd_mem_update_FSM_state_mkFSMstate$EN;

  // register header0_SUBCMDCPU
  reg [31 : 0] header0_SUBCMDCPU;
  wire [31 : 0] header0_SUBCMDCPU$D_IN;
  wire header0_SUBCMDCPU$EN;

  // register header0_SUBCMDQ
  reg [31 : 0] header0_SUBCMDQ;
  wire [31 : 0] header0_SUBCMDQ$D_IN;
  wire header0_SUBCMDQ$EN;

  // register offset_SUBCMDCPU
  reg [13 : 0] offset_SUBCMDCPU;
  wire [13 : 0] offset_SUBCMDCPU$D_IN;
  wire offset_SUBCMDCPU$EN;

  // register offset_SUBQ
  reg [13 : 0] offset_SUBQ;
  wire [13 : 0] offset_SUBQ$D_IN;
  wire offset_SUBQ$EN;

  // register pointer_cmd_addr_SUBCMDCPU
  reg [13 : 0] pointer_cmd_addr_SUBCMDCPU;
  wire [13 : 0] pointer_cmd_addr_SUBCMDCPU$D_IN;
  wire pointer_cmd_addr_SUBCMDCPU$EN;

  // register pointer_cmd_addr_SUBQ
  reg [13 : 0] pointer_cmd_addr_SUBQ;
  wire [13 : 0] pointer_cmd_addr_SUBQ$D_IN;
  wire pointer_cmd_addr_SUBQ$EN;

  // register subcmdq_length
  reg [31 : 0] subcmdq_length;
  wire [31 : 0] subcmdq_length$D_IN;
  wire subcmdq_length$EN;

  // ports of submodule cmd_memory_memory
  wire [31 : 0] cmd_memory_memory$DIA,
		cmd_memory_memory$DIB,
		cmd_memory_memory$DOA,
		cmd_memory_memory$DOB;
  wire [13 : 0] cmd_memory_memory$ADDRA, cmd_memory_memory$ADDRB;
  wire cmd_memory_memory$ENA,
       cmd_memory_memory$ENB,
       cmd_memory_memory$WEA,
       cmd_memory_memory$WEB;

  // ports of submodule cmd_memory_serverAdapterA_outDataCore
  wire [31 : 0] cmd_memory_serverAdapterA_outDataCore$D_IN;
  wire cmd_memory_serverAdapterA_outDataCore$CLR,
       cmd_memory_serverAdapterA_outDataCore$DEQ,
       cmd_memory_serverAdapterA_outDataCore$ENQ,
       cmd_memory_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule cmd_memory_serverAdapterB_outDataCore
  wire [31 : 0] cmd_memory_serverAdapterB_outDataCore$D_IN,
		cmd_memory_serverAdapterB_outDataCore$D_OUT;
  wire cmd_memory_serverAdapterB_outDataCore$CLR,
       cmd_memory_serverAdapterB_outDataCore$DEQ,
       cmd_memory_serverAdapterB_outDataCore$EMPTY_N,
       cmd_memory_serverAdapterB_outDataCore$ENQ,
       cmd_memory_serverAdapterB_outDataCore$FULL_N;

  // ports of submodule i_client_CMDQ
  wire [31 : 0] i_client_CMDQ$D_IN, i_client_CMDQ$D_OUT;
  wire i_client_CMDQ$CLR,
       i_client_CMDQ$DEQ,
       i_client_CMDQ$EMPTY_N,
       i_client_CMDQ$ENQ,
       i_client_CMDQ$FULL_N;

  // ports of submodule i_client_SUBCMDCPU
  wire [31 : 0] i_client_SUBCMDCPU$D_IN, i_client_SUBCMDCPU$D_OUT;
  wire i_client_SUBCMDCPU$CLR,
       i_client_SUBCMDCPU$DEQ,
       i_client_SUBCMDCPU$EMPTY_N,
       i_client_SUBCMDCPU$ENQ,
       i_client_SUBCMDCPU$FULL_N;

  // ports of submodule i_server_CMDQ
  wire [31 : 0] i_server_CMDQ$D_IN;
  wire i_server_CMDQ$CLR,
       i_server_CMDQ$DEQ,
       i_server_CMDQ$ENQ,
       i_server_CMDQ$FULL_N;

  // ports of submodule o_client_CMDQ
  wire [31 : 0] o_client_CMDQ$D_IN, o_client_CMDQ$D_OUT;
  wire o_client_CMDQ$CLR,
       o_client_CMDQ$DEQ,
       o_client_CMDQ$EMPTY_N,
       o_client_CMDQ$ENQ;

  // ports of submodule o_client_SUBCMDCPU
  wire [31 : 0] o_client_SUBCMDCPU$D_IN, o_client_SUBCMDCPU$D_OUT;
  wire o_client_SUBCMDCPU$CLR,
       o_client_SUBCMDCPU$DEQ,
       o_client_SUBCMDCPU$EMPTY_N,
       o_client_SUBCMDCPU$ENQ;

  // ports of submodule o_server_CMDQ
  reg [31 : 0] o_server_CMDQ$D_IN;
  wire [31 : 0] o_server_CMDQ$D_OUT;
  wire o_server_CMDQ$CLR,
       o_server_CMDQ$DEQ,
       o_server_CMDQ$EMPTY_N,
       o_server_CMDQ$ENQ,
       o_server_CMDQ$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_cmd_memory_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_cmd_memory_serverAdapterB_stageReadResponseAlways,
       WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l105c9,
       WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l112c30,
       WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l113c17,
       WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l120c17,
       WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l126c31,
       WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l130c17,
       WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l134c34,
       WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l142c35,
       WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l146c25,
       WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l151c25,
       WILL_FIRE_RL_fsm_cmd_mem_output_FSM_fsm_start,
       WILL_FIRE_RL_fsm_cmd_mem_output_FSM_idle_l103c31,
       WILL_FIRE_RL_fsm_cmd_mem_output_FSM_idle_l103c31_1,
       WILL_FIRE_RL_fsm_cmd_mem_output_FSM_idle_l103c31_2,
       WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l65c9,
       WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l76c23,
       WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l85c17,
       WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l90c17,
       WILL_FIRE_RL_fsm_cmd_mem_update_FSM_fsm_start,
       WILL_FIRE_RL_fsm_cmd_mem_update_FSM_idle_l63c31,
       WILL_FIRE_RL_fsm_cmd_mem_update_FSM_idle_l63c31_1;

  // inputs to muxes for submodule ports
  wire [31 : 0] MUX_cmd_memory_memory$a_put_3__VAL_2,
		MUX_o_server_CMDQ$enq_1__VAL_4;
  wire [13 : 0] MUX_cmd_memory_memory$a_put_2__VAL_1,
		MUX_cmd_memory_memory$b_put_2__VAL_1,
		MUX_offset_SUBCMDCPU$write_1__VAL_1,
		MUX_offset_SUBQ$write_1__VAL_1;
  wire MUX_fsm_cmd_mem_output_FSM_state_mkFSMstate$write_1__SEL_1,
       MUX_fsm_cmd_mem_update_FSM_state_mkFSMstate$write_1__SEL_1;

  // remaining internal signals
  wire [13 : 0] subcmdcpu_length__h653;
  wire [2 : 0] cmd_memory_serverAdapterB_cnt_3_PLUS_IF_cmd_me_ETC___d89;
  wire cmd_memory_serverAdapterA_cnt_6_SLT_3___d173,
       cmd_memory_serverAdapterB_cnt_3_SLT_3___d272,
       fsm_cmd_mem_output_FSM_abort_whas__06_AND_fsm__ETC___d307,
       fsm_cmd_mem_update_FSM_abort_whas__18_AND_fsm__ETC___d200,
       offset_SUBCMDCPU_52_ULE_0x0_CONCAT_header0_SUB_ETC___d156,
       offset_SUBQ_42_ULE_subcmdq_length_43_BITS_13_T_ETC___d245;

  // actionvalue method bluetile_client_SUBCMDCPU_request_get
  assign bluetile_client_SUBCMDCPU_request_get = o_client_SUBCMDCPU$D_OUT ;
  assign RDY_bluetile_client_SUBCMDCPU_request_get =
	     o_client_SUBCMDCPU$EMPTY_N ;

  // action method bluetile_client_SUBCMDCPU_response_put
  assign RDY_bluetile_client_SUBCMDCPU_response_put =
	     i_client_SUBCMDCPU$FULL_N ;

  // actionvalue method bluetile_client_CMDQ_request_get
  assign bluetile_client_CMDQ_request_get = o_client_CMDQ$D_OUT ;
  assign RDY_bluetile_client_CMDQ_request_get = o_client_CMDQ$EMPTY_N ;

  // action method bluetile_client_CMDQ_response_put
  assign RDY_bluetile_client_CMDQ_response_put = i_client_CMDQ$FULL_N ;

  // action method bluetile_server_CMDQ_request_put
  assign RDY_bluetile_server_CMDQ_request_put = i_server_CMDQ$FULL_N ;

  // actionvalue method bluetile_server_CMDQ_response_get
  assign bluetile_server_CMDQ_response_get = o_server_CMDQ$D_OUT ;
  assign RDY_bluetile_server_CMDQ_response_get = o_server_CMDQ$EMPTY_N ;

  // submodule cmd_memory_memory
  BRAM2Load #(.FILENAME("command_memory.txt"),
	      .PIPELINED(1'd0),
	      .ADDR_WIDTH(32'd14),
	      .DATA_WIDTH(32'd32),
	      .MEMSIZE(15'd16384),
	      .BINARY(1'd0)) cmd_memory_memory(.CLKA(CLK),
					       .CLKB(CLK),
					       .ADDRA(cmd_memory_memory$ADDRA),
					       .ADDRB(cmd_memory_memory$ADDRB),
					       .DIA(cmd_memory_memory$DIA),
					       .DIB(cmd_memory_memory$DIB),
					       .WEA(cmd_memory_memory$WEA),
					       .WEB(cmd_memory_memory$WEB),
					       .ENA(cmd_memory_memory$ENA),
					       .ENB(cmd_memory_memory$ENB),
					       .DOA(cmd_memory_memory$DOA),
					       .DOB(cmd_memory_memory$DOB));

  // submodule cmd_memory_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) cmd_memory_serverAdapterA_outDataCore(.RST_N(RST_N),
								     .CLK(CLK),
								     .D_IN(cmd_memory_serverAdapterA_outDataCore$D_IN),
								     .ENQ(cmd_memory_serverAdapterA_outDataCore$ENQ),
								     .DEQ(cmd_memory_serverAdapterA_outDataCore$DEQ),
								     .CLR(cmd_memory_serverAdapterA_outDataCore$CLR),
								     .D_OUT(),
								     .FULL_N(cmd_memory_serverAdapterA_outDataCore$FULL_N),
								     .EMPTY_N());

  // submodule cmd_memory_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) cmd_memory_serverAdapterB_outDataCore(.RST_N(RST_N),
								     .CLK(CLK),
								     .D_IN(cmd_memory_serverAdapterB_outDataCore$D_IN),
								     .ENQ(cmd_memory_serverAdapterB_outDataCore$ENQ),
								     .DEQ(cmd_memory_serverAdapterB_outDataCore$DEQ),
								     .CLR(cmd_memory_serverAdapterB_outDataCore$CLR),
								     .D_OUT(cmd_memory_serverAdapterB_outDataCore$D_OUT),
								     .FULL_N(cmd_memory_serverAdapterB_outDataCore$FULL_N),
								     .EMPTY_N(cmd_memory_serverAdapterB_outDataCore$EMPTY_N));

  // submodule i_client_CMDQ
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd50),
	      .p3cntr_width(32'd6),
	      .guarded(32'd1)) i_client_CMDQ(.RST_N(RST_N),
					     .CLK(CLK),
					     .D_IN(i_client_CMDQ$D_IN),
					     .ENQ(i_client_CMDQ$ENQ),
					     .DEQ(i_client_CMDQ$DEQ),
					     .CLR(i_client_CMDQ$CLR),
					     .D_OUT(i_client_CMDQ$D_OUT),
					     .FULL_N(i_client_CMDQ$FULL_N),
					     .EMPTY_N(i_client_CMDQ$EMPTY_N));

  // submodule i_client_SUBCMDCPU
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd50),
	      .p3cntr_width(32'd6),
	      .guarded(32'd1)) i_client_SUBCMDCPU(.RST_N(RST_N),
						  .CLK(CLK),
						  .D_IN(i_client_SUBCMDCPU$D_IN),
						  .ENQ(i_client_SUBCMDCPU$ENQ),
						  .DEQ(i_client_SUBCMDCPU$DEQ),
						  .CLR(i_client_SUBCMDCPU$CLR),
						  .D_OUT(i_client_SUBCMDCPU$D_OUT),
						  .FULL_N(i_client_SUBCMDCPU$FULL_N),
						  .EMPTY_N(i_client_SUBCMDCPU$EMPTY_N));

  // submodule i_server_CMDQ
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd50),
	      .p3cntr_width(32'd6),
	      .guarded(32'd1)) i_server_CMDQ(.RST_N(RST_N),
					     .CLK(CLK),
					     .D_IN(i_server_CMDQ$D_IN),
					     .ENQ(i_server_CMDQ$ENQ),
					     .DEQ(i_server_CMDQ$DEQ),
					     .CLR(i_server_CMDQ$CLR),
					     .D_OUT(),
					     .FULL_N(i_server_CMDQ$FULL_N),
					     .EMPTY_N());

  // submodule o_client_CMDQ
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd50),
	      .p3cntr_width(32'd6),
	      .guarded(32'd1)) o_client_CMDQ(.RST_N(RST_N),
					     .CLK(CLK),
					     .D_IN(o_client_CMDQ$D_IN),
					     .ENQ(o_client_CMDQ$ENQ),
					     .DEQ(o_client_CMDQ$DEQ),
					     .CLR(o_client_CMDQ$CLR),
					     .D_OUT(o_client_CMDQ$D_OUT),
					     .FULL_N(),
					     .EMPTY_N(o_client_CMDQ$EMPTY_N));

  // submodule o_client_SUBCMDCPU
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd50),
	      .p3cntr_width(32'd6),
	      .guarded(32'd1)) o_client_SUBCMDCPU(.RST_N(RST_N),
						  .CLK(CLK),
						  .D_IN(o_client_SUBCMDCPU$D_IN),
						  .ENQ(o_client_SUBCMDCPU$ENQ),
						  .DEQ(o_client_SUBCMDCPU$DEQ),
						  .CLR(o_client_SUBCMDCPU$CLR),
						  .D_OUT(o_client_SUBCMDCPU$D_OUT),
						  .FULL_N(),
						  .EMPTY_N(o_client_SUBCMDCPU$EMPTY_N));

  // submodule o_server_CMDQ
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd50),
	      .p3cntr_width(32'd6),
	      .guarded(32'd1)) o_server_CMDQ(.RST_N(RST_N),
					     .CLK(CLK),
					     .D_IN(o_server_CMDQ$D_IN),
					     .ENQ(o_server_CMDQ$ENQ),
					     .DEQ(o_server_CMDQ$DEQ),
					     .CLR(o_server_CMDQ$CLR),
					     .D_OUT(o_server_CMDQ$D_OUT),
					     .FULL_N(o_server_CMDQ$FULL_N),
					     .EMPTY_N(o_server_CMDQ$EMPTY_N));

  // rule RL_fsm_cmd_mem_update_FSM_action_l76c23
  assign WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l76c23 =
	     cmd_memory_serverAdapterA_cnt_6_SLT_3___d173 &&
	     fsm_cmd_mem_update_FSM_state_mkFSMstate == 3'd2 ;

  // rule RL_fsm_cmd_mem_update_FSM_action_l85c17
  assign WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l85c17 =
	     i_client_SUBCMDCPU$EMPTY_N &&
	     offset_SUBCMDCPU_52_ULE_0x0_CONCAT_header0_SUB_ETC___d156 &&
	     (fsm_cmd_mem_update_FSM_state_mkFSMstate == 3'd3 ||
	      fsm_cmd_mem_update_FSM_state_mkFSMstate == 3'd5) ;

  // rule RL_fsm_cmd_mem_update_FSM_action_l90c17
  assign WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l90c17 =
	     cmd_memory_serverAdapterA_cnt_6_SLT_3___d173 &&
	     fsm_cmd_mem_update_FSM_state_mkFSMstate == 3'd4 ;

  // rule RL_fsm_cmd_mem_update_FSM_fsm_start
  assign WILL_FIRE_RL_fsm_cmd_mem_update_FSM_fsm_start =
	     fsm_cmd_mem_update_FSM_abort_whas__18_AND_fsm__ETC___d200 &&
	     fsm_cmd_mem_update_FSM_start_reg ;

  // rule RL_fsm_cmd_mem_update_FSM_action_l65c9
  assign WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l65c9 =
	     i_client_SUBCMDCPU$EMPTY_N &&
	     (fsm_cmd_mem_update_FSM_start_wire$whas &&
	      fsm_cmd_mem_update_FSM_state_mkFSMstate == 3'd0 ||
	      !offset_SUBCMDCPU_52_ULE_0x0_CONCAT_header0_SUB_ETC___d156 &&
	      fsm_cmd_mem_update_FSM_start_wire$whas &&
	      fsm_cmd_mem_update_FSM_state_mkFSMstate == 3'd3 ||
	      !offset_SUBCMDCPU_52_ULE_0x0_CONCAT_header0_SUB_ETC___d156 &&
	      fsm_cmd_mem_update_FSM_start_wire$whas &&
	      fsm_cmd_mem_update_FSM_state_mkFSMstate == 3'd5) ;

  // rule RL_fsm_cmd_mem_update_FSM_idle_l63c31
  assign WILL_FIRE_RL_fsm_cmd_mem_update_FSM_idle_l63c31 =
	     !offset_SUBCMDCPU_52_ULE_0x0_CONCAT_header0_SUB_ETC___d156 &&
	     !fsm_cmd_mem_update_FSM_start_wire$whas &&
	     fsm_cmd_mem_update_FSM_state_mkFSMstate == 3'd3 ;

  // rule RL_fsm_cmd_mem_update_FSM_idle_l63c31_1
  assign WILL_FIRE_RL_fsm_cmd_mem_update_FSM_idle_l63c31_1 =
	     !offset_SUBCMDCPU_52_ULE_0x0_CONCAT_header0_SUB_ETC___d156 &&
	     !fsm_cmd_mem_update_FSM_start_wire$whas &&
	     fsm_cmd_mem_update_FSM_state_mkFSMstate == 3'd5 ;

  // rule RL_fsm_cmd_mem_output_FSM_action_l112c30
  assign WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l112c30 =
	     o_server_CMDQ$FULL_N && header0_SUBCMDQ[31:24] == 8'hCC &&
	     fsm_cmd_mem_output_FSM_state_mkFSMstate == 4'd1 ;

  // rule RL_fsm_cmd_mem_output_FSM_action_l113c17
  assign WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l113c17 =
	     i_client_CMDQ$EMPTY_N && o_server_CMDQ$FULL_N &&
	     fsm_cmd_mem_output_FSM_state_mkFSMstate == 4'd2 ;

  // rule RL_fsm_cmd_mem_output_FSM_action_l120c17
  assign WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l120c17 =
	     header0_SUBCMDQ[31:24] != 8'hCC &&
	     fsm_cmd_mem_output_FSM_state_mkFSMstate == 4'd1 ;

  // rule RL_fsm_cmd_mem_output_FSM_action_l126c31
  assign WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l126c31 =
	     cmd_memory_serverAdapterB_cnt_3_SLT_3___d272 &&
	     fsm_cmd_mem_output_FSM_state_mkFSMstate == 4'd4 ;

  // rule RL_fsm_cmd_mem_output_FSM_action_l130c17
  assign WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l130c17 =
	     (cmd_memory_serverAdapterB_outDataCore$EMPTY_N ||
	      cmd_memory_serverAdapterB_outData_enqData$whas) &&
	     cmd_memory_serverAdapterB_outData_outData$whas &&
	     fsm_cmd_mem_output_FSM_state_mkFSMstate == 4'd5 ;

  // rule RL_fsm_cmd_mem_output_FSM_action_l134c34
  assign WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l134c34 =
	     o_server_CMDQ$FULL_N &&
	     fsm_cmd_mem_output_FSM_state_mkFSMstate == 4'd6 ;

  // rule RL_fsm_cmd_mem_output_FSM_action_l142c35
  assign WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l142c35 =
	     cmd_memory_serverAdapterB_cnt_3_SLT_3___d272 &&
	     offset_SUBQ_42_ULE_subcmdq_length_43_BITS_13_T_ETC___d245 &&
	     (fsm_cmd_mem_output_FSM_state_mkFSMstate == 4'd7 ||
	      fsm_cmd_mem_output_FSM_state_mkFSMstate == 4'd10) ;

  // rule RL_cmd_memory_serverAdapterB_stageReadResponseAlways
  assign WILL_FIRE_RL_cmd_memory_serverAdapterB_stageReadResponseAlways =
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l142c35 ||
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l126c31 ;

  // rule RL_fsm_cmd_mem_output_FSM_action_l146c25
  assign WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l146c25 =
	     (cmd_memory_serverAdapterB_outDataCore$EMPTY_N ||
	      cmd_memory_serverAdapterB_outData_enqData$whas) &&
	     cmd_memory_serverAdapterB_outData_outData$whas &&
	     fsm_cmd_mem_output_FSM_state_mkFSMstate == 4'd8 ;

  // rule RL_cmd_memory_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_cmd_memory_serverAdapterB_outData_enqAndDeq =
	     cmd_memory_serverAdapterB_outDataCore$EMPTY_N &&
	     cmd_memory_serverAdapterB_outDataCore$FULL_N &&
	     cmd_memory_serverAdapterB_outData_deqCalled$whas &&
	     cmd_memory_serverAdapterB_outData_enqData$whas ;

  // rule RL_fsm_cmd_mem_output_FSM_action_l151c25
  assign WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l151c25 =
	     o_server_CMDQ$FULL_N &&
	     fsm_cmd_mem_output_FSM_state_mkFSMstate == 4'd9 ;

  // rule RL_fsm_cmd_mem_output_FSM_fsm_start
  assign WILL_FIRE_RL_fsm_cmd_mem_output_FSM_fsm_start =
	     fsm_cmd_mem_output_FSM_abort_whas__06_AND_fsm__ETC___d307 &&
	     (!fsm_cmd_mem_output_FSM_start_reg_1 ||
	      fsm_cmd_mem_output_FSM_state_fired) &&
	     fsm_cmd_mem_output_FSM_start_reg ;

  // rule RL_fsm_cmd_mem_output_FSM_action_l105c9
  assign WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l105c9 =
	     i_client_CMDQ$EMPTY_N &&
	     (fsm_cmd_mem_output_FSM_start_wire$whas &&
	      (fsm_cmd_mem_output_FSM_state_mkFSMstate == 4'd0 ||
	       fsm_cmd_mem_output_FSM_state_mkFSMstate == 4'd3) ||
	      !offset_SUBQ_42_ULE_subcmdq_length_43_BITS_13_T_ETC___d245 &&
	      fsm_cmd_mem_output_FSM_start_wire$whas &&
	      (fsm_cmd_mem_output_FSM_state_mkFSMstate == 4'd7 ||
	       fsm_cmd_mem_output_FSM_state_mkFSMstate == 4'd10)) ;

  // rule RL_fsm_cmd_mem_output_FSM_idle_l103c31
  assign WILL_FIRE_RL_fsm_cmd_mem_output_FSM_idle_l103c31 =
	     !fsm_cmd_mem_output_FSM_start_wire$whas &&
	     fsm_cmd_mem_output_FSM_state_mkFSMstate == 4'd3 ;

  // rule RL_fsm_cmd_mem_output_FSM_idle_l103c31_1
  assign WILL_FIRE_RL_fsm_cmd_mem_output_FSM_idle_l103c31_1 =
	     !offset_SUBQ_42_ULE_subcmdq_length_43_BITS_13_T_ETC___d245 &&
	     !fsm_cmd_mem_output_FSM_start_wire$whas &&
	     fsm_cmd_mem_output_FSM_state_mkFSMstate == 4'd7 ;

  // rule RL_fsm_cmd_mem_output_FSM_idle_l103c31_2
  assign WILL_FIRE_RL_fsm_cmd_mem_output_FSM_idle_l103c31_2 =
	     !offset_SUBQ_42_ULE_subcmdq_length_43_BITS_13_T_ETC___d245 &&
	     !fsm_cmd_mem_output_FSM_start_wire$whas &&
	     fsm_cmd_mem_output_FSM_state_mkFSMstate == 4'd10 ;

  // inputs to muxes for submodule ports
  assign MUX_fsm_cmd_mem_output_FSM_state_mkFSMstate$write_1__SEL_1 =
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_idle_l103c31_2 ||
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_idle_l103c31_1 ||
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_idle_l103c31 ;
  assign MUX_fsm_cmd_mem_update_FSM_state_mkFSMstate$write_1__SEL_1 =
	     WILL_FIRE_RL_fsm_cmd_mem_update_FSM_idle_l63c31_1 ||
	     WILL_FIRE_RL_fsm_cmd_mem_update_FSM_idle_l63c31 ;
  assign MUX_cmd_memory_memory$a_put_2__VAL_1 =
	     pointer_cmd_addr_SUBCMDCPU + offset_SUBCMDCPU ;
  assign MUX_cmd_memory_memory$a_put_3__VAL_2 =
	     { 8'h0,
	       header0_SUBCMDCPU[31:24],
	       8'd0,
	       header0_SUBCMDCPU[7:0] } ;
  assign MUX_cmd_memory_memory$b_put_2__VAL_1 =
	     pointer_cmd_addr_SUBQ + offset_SUBQ ;
  assign MUX_o_server_CMDQ$enq_1__VAL_4 = header0_SUBCMDQ | subcmdq_length ;
  assign MUX_offset_SUBCMDCPU$write_1__VAL_1 = offset_SUBCMDCPU + 14'd1 ;
  assign MUX_offset_SUBQ$write_1__VAL_1 = offset_SUBQ + 14'd1 ;

  // inlined wires
  assign cmd_memory_serverAdapterA_outData_enqData$whas =
	     cmd_memory_serverAdapterA_outDataCore$FULL_N &&
	     cmd_memory_serverAdapterA_s1[1] &&
	     cmd_memory_serverAdapterA_s1[0] ;
  assign cmd_memory_serverAdapterA_writeWithResp$whas =
	     WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l90c17 ||
	     WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l76c23 ;
  assign cmd_memory_serverAdapterB_outData_enqData$whas =
	     cmd_memory_serverAdapterB_outDataCore$FULL_N &&
	     cmd_memory_serverAdapterB_s1[1] &&
	     cmd_memory_serverAdapterB_s1[0] ;
  assign cmd_memory_serverAdapterB_outData_outData$wget =
	     cmd_memory_serverAdapterB_outDataCore$EMPTY_N ?
	       cmd_memory_serverAdapterB_outDataCore$D_OUT :
	       cmd_memory_memory$DOB ;
  assign cmd_memory_serverAdapterB_outData_outData$whas =
	     cmd_memory_serverAdapterB_outDataCore$EMPTY_N ||
	     !cmd_memory_serverAdapterB_outDataCore$EMPTY_N &&
	     cmd_memory_serverAdapterB_outData_enqData$whas ;
  assign fsm_cmd_mem_update_FSM_start_wire$whas =
	     WILL_FIRE_RL_fsm_cmd_mem_update_FSM_fsm_start ||
	     fsm_cmd_mem_update_FSM_start_reg_1 &&
	     !fsm_cmd_mem_update_FSM_state_fired ;
  assign fsm_cmd_mem_output_FSM_start_wire$whas =
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_fsm_start ||
	     fsm_cmd_mem_output_FSM_start_reg_1 &&
	     !fsm_cmd_mem_output_FSM_state_fired ;
  assign cmd_memory_serverAdapterB_outData_deqCalled$whas =
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l146c25 ||
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l130c17 ;
  assign fsm_cmd_mem_update_FSM_state_set_pw$whas =
	     WILL_FIRE_RL_fsm_cmd_mem_update_FSM_idle_l63c31_1 ||
	     WILL_FIRE_RL_fsm_cmd_mem_update_FSM_idle_l63c31 ||
	     WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l90c17 ||
	     WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l85c17 ||
	     WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l76c23 ||
	     fsm_cmd_mem_update_FSM_state_mkFSMstate == 3'd1 ||
	     WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l65c9 ;
  assign fsm_cmd_mem_output_FSM_state_set_pw$whas =
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_idle_l103c31_2 ||
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_idle_l103c31_1 ||
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_idle_l103c31 ||
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l151c25 ||
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l146c25 ||
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l142c35 ||
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l134c34 ||
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l130c17 ||
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l126c31 ||
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l120c17 ||
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l113c17 ||
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l112c30 ||
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l105c9 ;

  // register cmd_memory_serverAdapterA_cnt
  assign cmd_memory_serverAdapterA_cnt$D_IN =
	     cmd_memory_serverAdapterA_cnt + 3'd0 + 3'd0 ;
  assign cmd_memory_serverAdapterA_cnt$EN = 1'b0 ;

  // register cmd_memory_serverAdapterA_s1
  assign cmd_memory_serverAdapterA_s1$D_IN =
	     { cmd_memory_serverAdapterA_writeWithResp$whas, 1'b0 } ;
  assign cmd_memory_serverAdapterA_s1$EN = 1'd1 ;

  // register cmd_memory_serverAdapterB_cnt
  assign cmd_memory_serverAdapterB_cnt$D_IN =
	     cmd_memory_serverAdapterB_cnt_3_PLUS_IF_cmd_me_ETC___d89 ;
  assign cmd_memory_serverAdapterB_cnt$EN =
	     WILL_FIRE_RL_cmd_memory_serverAdapterB_stageReadResponseAlways ||
	     cmd_memory_serverAdapterB_outData_deqCalled$whas ;

  // register cmd_memory_serverAdapterB_s1
  assign cmd_memory_serverAdapterB_s1$D_IN =
	     { WILL_FIRE_RL_cmd_memory_serverAdapterB_stageReadResponseAlways,
	       1'b1 } ;
  assign cmd_memory_serverAdapterB_s1$EN = 1'd1 ;

  // register crnt_subcmd_SUBCMDCPU
  assign crnt_subcmd_SUBCMDCPU$D_IN = i_client_SUBCMDCPU$D_OUT ;
  assign crnt_subcmd_SUBCMDCPU$EN =
	     WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l85c17 ;

  // register crnt_subcmd_SUBQ
  assign crnt_subcmd_SUBQ$D_IN =
	     cmd_memory_serverAdapterB_outData_outData$wget ;
  assign crnt_subcmd_SUBQ$EN =
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l146c25 ;

  // register fsm_cmd_mem_output_FSM_start_reg
  assign fsm_cmd_mem_output_FSM_start_reg$D_IN =
	     !WILL_FIRE_RL_fsm_cmd_mem_output_FSM_fsm_start ;
  assign fsm_cmd_mem_output_FSM_start_reg$EN =
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_fsm_start ||
	     fsm_cmd_mem_output_FSM_abort_whas__06_AND_fsm__ETC___d307 &&
	     (!fsm_cmd_mem_output_FSM_start_reg_1 ||
	      fsm_cmd_mem_output_FSM_state_fired) &&
	     !fsm_cmd_mem_output_FSM_start_reg ;

  // register fsm_cmd_mem_output_FSM_start_reg_1
  assign fsm_cmd_mem_output_FSM_start_reg_1$D_IN =
	     fsm_cmd_mem_output_FSM_start_wire$whas ;
  assign fsm_cmd_mem_output_FSM_start_reg_1$EN = 1'd1 ;

  // register fsm_cmd_mem_output_FSM_state_can_overlap
  assign fsm_cmd_mem_output_FSM_state_can_overlap$D_IN =
	     fsm_cmd_mem_output_FSM_state_set_pw$whas ||
	     fsm_cmd_mem_output_FSM_state_can_overlap ;
  assign fsm_cmd_mem_output_FSM_state_can_overlap$EN = 1'd1 ;

  // register fsm_cmd_mem_output_FSM_state_fired
  assign fsm_cmd_mem_output_FSM_state_fired$D_IN =
	     fsm_cmd_mem_output_FSM_state_set_pw$whas ;
  assign fsm_cmd_mem_output_FSM_state_fired$EN = 1'd1 ;

  // register fsm_cmd_mem_output_FSM_state_mkFSMstate
  always@(MUX_fsm_cmd_mem_output_FSM_state_mkFSMstate$write_1__SEL_1 or
	  WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l105c9 or
	  WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l112c30 or
	  WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l113c17 or
	  WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l120c17 or
	  WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l126c31 or
	  WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l130c17 or
	  WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l134c34 or
	  WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l142c35 or
	  WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l146c25 or
	  WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l151c25)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_fsm_cmd_mem_output_FSM_state_mkFSMstate$write_1__SEL_1:
	  fsm_cmd_mem_output_FSM_state_mkFSMstate$D_IN = 4'd0;
      WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l105c9:
	  fsm_cmd_mem_output_FSM_state_mkFSMstate$D_IN = 4'd1;
      WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l112c30:
	  fsm_cmd_mem_output_FSM_state_mkFSMstate$D_IN = 4'd2;
      WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l113c17:
	  fsm_cmd_mem_output_FSM_state_mkFSMstate$D_IN = 4'd3;
      WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l120c17:
	  fsm_cmd_mem_output_FSM_state_mkFSMstate$D_IN = 4'd4;
      WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l126c31:
	  fsm_cmd_mem_output_FSM_state_mkFSMstate$D_IN = 4'd5;
      WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l130c17:
	  fsm_cmd_mem_output_FSM_state_mkFSMstate$D_IN = 4'd6;
      WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l134c34:
	  fsm_cmd_mem_output_FSM_state_mkFSMstate$D_IN = 4'd7;
      WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l142c35:
	  fsm_cmd_mem_output_FSM_state_mkFSMstate$D_IN = 4'd8;
      WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l146c25:
	  fsm_cmd_mem_output_FSM_state_mkFSMstate$D_IN = 4'd9;
      WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l151c25:
	  fsm_cmd_mem_output_FSM_state_mkFSMstate$D_IN = 4'd10;
      default: fsm_cmd_mem_output_FSM_state_mkFSMstate$D_IN =
		   4'b1010 /* unspecified value */ ;
    endcase
  end
  assign fsm_cmd_mem_output_FSM_state_mkFSMstate$EN =
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_idle_l103c31_2 ||
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_idle_l103c31_1 ||
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_idle_l103c31 ||
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l105c9 ||
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l112c30 ||
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l113c17 ||
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l120c17 ||
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l126c31 ||
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l130c17 ||
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l134c34 ||
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l142c35 ||
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l146c25 ||
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l151c25 ;

  // register fsm_cmd_mem_update_FSM_start_reg
  assign fsm_cmd_mem_update_FSM_start_reg$D_IN =
	     !WILL_FIRE_RL_fsm_cmd_mem_update_FSM_fsm_start ;
  assign fsm_cmd_mem_update_FSM_start_reg$EN =
	     WILL_FIRE_RL_fsm_cmd_mem_update_FSM_fsm_start ||
	     fsm_cmd_mem_update_FSM_abort_whas__18_AND_fsm__ETC___d200 &&
	     !fsm_cmd_mem_update_FSM_start_reg ;

  // register fsm_cmd_mem_update_FSM_start_reg_1
  assign fsm_cmd_mem_update_FSM_start_reg_1$D_IN =
	     fsm_cmd_mem_update_FSM_start_wire$whas ;
  assign fsm_cmd_mem_update_FSM_start_reg_1$EN = 1'd1 ;

  // register fsm_cmd_mem_update_FSM_state_can_overlap
  assign fsm_cmd_mem_update_FSM_state_can_overlap$D_IN =
	     fsm_cmd_mem_update_FSM_state_set_pw$whas ||
	     fsm_cmd_mem_update_FSM_state_can_overlap ;
  assign fsm_cmd_mem_update_FSM_state_can_overlap$EN = 1'd1 ;

  // register fsm_cmd_mem_update_FSM_state_fired
  assign fsm_cmd_mem_update_FSM_state_fired$D_IN =
	     fsm_cmd_mem_update_FSM_state_set_pw$whas ;
  assign fsm_cmd_mem_update_FSM_state_fired$EN = 1'd1 ;

  // register fsm_cmd_mem_update_FSM_state_mkFSMstate
  always@(MUX_fsm_cmd_mem_update_FSM_state_mkFSMstate$write_1__SEL_1 or
	  WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l65c9 or
	  fsm_cmd_mem_update_FSM_state_mkFSMstate or
	  WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l76c23 or
	  WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l85c17 or
	  WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l90c17)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_fsm_cmd_mem_update_FSM_state_mkFSMstate$write_1__SEL_1:
	  fsm_cmd_mem_update_FSM_state_mkFSMstate$D_IN = 3'd0;
      WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l65c9:
	  fsm_cmd_mem_update_FSM_state_mkFSMstate$D_IN = 3'd1;
      fsm_cmd_mem_update_FSM_state_mkFSMstate == 3'd1:
	  fsm_cmd_mem_update_FSM_state_mkFSMstate$D_IN = 3'd2;
      WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l76c23:
	  fsm_cmd_mem_update_FSM_state_mkFSMstate$D_IN = 3'd3;
      WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l85c17:
	  fsm_cmd_mem_update_FSM_state_mkFSMstate$D_IN = 3'd4;
      WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l90c17:
	  fsm_cmd_mem_update_FSM_state_mkFSMstate$D_IN = 3'd5;
      default: fsm_cmd_mem_update_FSM_state_mkFSMstate$D_IN =
		   3'b010 /* unspecified value */ ;
    endcase
  end
  assign fsm_cmd_mem_update_FSM_state_mkFSMstate$EN =
	     WILL_FIRE_RL_fsm_cmd_mem_update_FSM_idle_l63c31_1 ||
	     WILL_FIRE_RL_fsm_cmd_mem_update_FSM_idle_l63c31 ||
	     WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l65c9 ||
	     fsm_cmd_mem_update_FSM_state_mkFSMstate == 3'd1 ||
	     WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l76c23 ||
	     WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l85c17 ||
	     WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l90c17 ;

  // register header0_SUBCMDCPU
  assign header0_SUBCMDCPU$D_IN = i_client_SUBCMDCPU$D_OUT ;
  assign header0_SUBCMDCPU$EN =
	     WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l65c9 ;

  // register header0_SUBCMDQ
  assign header0_SUBCMDQ$D_IN = i_client_CMDQ$D_OUT ;
  assign header0_SUBCMDQ$EN =
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l105c9 ;

  // register offset_SUBCMDCPU
  assign offset_SUBCMDCPU$D_IN =
	     WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l90c17 ?
	       MUX_offset_SUBCMDCPU$write_1__VAL_1 :
	       14'd1 ;
  assign offset_SUBCMDCPU$EN =
	     WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l90c17 ||
	     fsm_cmd_mem_update_FSM_state_mkFSMstate == 3'd1 ;

  // register offset_SUBQ
  assign offset_SUBQ$D_IN =
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l151c25 ?
	       MUX_offset_SUBQ$write_1__VAL_1 :
	       14'd1 ;
  assign offset_SUBQ$EN =
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l151c25 ||
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l120c17 ;

  // register pointer_cmd_addr_SUBCMDCPU
  assign pointer_cmd_addr_SUBCMDCPU$D_IN = { header0_SUBCMDCPU[15:8], 6'd0 } ;
  assign pointer_cmd_addr_SUBCMDCPU$EN =
	     fsm_cmd_mem_update_FSM_state_mkFSMstate == 3'd1 ;

  // register pointer_cmd_addr_SUBQ
  assign pointer_cmd_addr_SUBQ$D_IN = { header0_SUBCMDQ[15:8], 6'd0 } ;
  assign pointer_cmd_addr_SUBQ$EN =
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l120c17 ;

  // register subcmdq_length
  assign subcmdq_length$D_IN =
	     cmd_memory_serverAdapterB_outData_outData$wget ;
  assign subcmdq_length$EN =
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l130c17 ;

  // submodule cmd_memory_memory
  assign cmd_memory_memory$ADDRA =
	     WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l90c17 ?
	       MUX_cmd_memory_memory$a_put_2__VAL_1 :
	       pointer_cmd_addr_SUBCMDCPU ;
  assign cmd_memory_memory$ADDRB =
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l142c35 ?
	       MUX_cmd_memory_memory$b_put_2__VAL_1 :
	       pointer_cmd_addr_SUBQ ;
  assign cmd_memory_memory$DIA =
	     WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l90c17 ?
	       crnt_subcmd_SUBCMDCPU :
	       MUX_cmd_memory_memory$a_put_3__VAL_2 ;
  assign cmd_memory_memory$DIB = 32'd0 ;
  assign cmd_memory_memory$WEA = 1'd1 ;
  assign cmd_memory_memory$WEB = 1'd0 ;
  assign cmd_memory_memory$ENA =
	     cmd_memory_serverAdapterA_writeWithResp$whas ;
  assign cmd_memory_memory$ENB =
	     WILL_FIRE_RL_cmd_memory_serverAdapterB_stageReadResponseAlways ;

  // submodule cmd_memory_serverAdapterA_outDataCore
  assign cmd_memory_serverAdapterA_outDataCore$D_IN = cmd_memory_memory$DOA ;
  assign cmd_memory_serverAdapterA_outDataCore$ENQ =
	     cmd_memory_serverAdapterA_outDataCore$FULL_N &&
	     cmd_memory_serverAdapterA_outData_enqData$whas ;
  assign cmd_memory_serverAdapterA_outDataCore$DEQ = 1'b0 ;
  assign cmd_memory_serverAdapterA_outDataCore$CLR = 1'b0 ;

  // submodule cmd_memory_serverAdapterB_outDataCore
  assign cmd_memory_serverAdapterB_outDataCore$D_IN = cmd_memory_memory$DOB ;
  assign cmd_memory_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_cmd_memory_serverAdapterB_outData_enqAndDeq ||
	     cmd_memory_serverAdapterB_outDataCore$FULL_N &&
	     !cmd_memory_serverAdapterB_outData_deqCalled$whas &&
	     cmd_memory_serverAdapterB_outData_enqData$whas ;
  assign cmd_memory_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_cmd_memory_serverAdapterB_outData_enqAndDeq ||
	     cmd_memory_serverAdapterB_outDataCore$EMPTY_N &&
	     cmd_memory_serverAdapterB_outData_deqCalled$whas &&
	     !cmd_memory_serverAdapterB_outData_enqData$whas ;
  assign cmd_memory_serverAdapterB_outDataCore$CLR = 1'b0 ;

  // submodule i_client_CMDQ
  assign i_client_CMDQ$D_IN = bluetile_client_CMDQ_response_put ;
  assign i_client_CMDQ$ENQ = EN_bluetile_client_CMDQ_response_put ;
  assign i_client_CMDQ$DEQ =
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l113c17 ||
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l105c9 ;
  assign i_client_CMDQ$CLR = 1'b0 ;

  // submodule i_client_SUBCMDCPU
  assign i_client_SUBCMDCPU$D_IN = bluetile_client_SUBCMDCPU_response_put ;
  assign i_client_SUBCMDCPU$ENQ = EN_bluetile_client_SUBCMDCPU_response_put ;
  assign i_client_SUBCMDCPU$DEQ =
	     WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l85c17 ||
	     WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l65c9 ;
  assign i_client_SUBCMDCPU$CLR = 1'b0 ;

  // submodule i_server_CMDQ
  assign i_server_CMDQ$D_IN = bluetile_server_CMDQ_request_put ;
  assign i_server_CMDQ$ENQ = EN_bluetile_server_CMDQ_request_put ;
  assign i_server_CMDQ$DEQ = 1'b0 ;
  assign i_server_CMDQ$CLR = 1'b0 ;

  // submodule o_client_CMDQ
  assign o_client_CMDQ$D_IN = 32'h0 ;
  assign o_client_CMDQ$ENQ = 1'b0 ;
  assign o_client_CMDQ$DEQ = EN_bluetile_client_CMDQ_request_get ;
  assign o_client_CMDQ$CLR = 1'b0 ;

  // submodule o_client_SUBCMDCPU
  assign o_client_SUBCMDCPU$D_IN = 32'h0 ;
  assign o_client_SUBCMDCPU$ENQ = 1'b0 ;
  assign o_client_SUBCMDCPU$DEQ = EN_bluetile_client_SUBCMDCPU_request_get ;
  assign o_client_SUBCMDCPU$CLR = 1'b0 ;

  // submodule o_server_CMDQ
  always@(WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l112c30 or
	  header0_SUBCMDQ or
	  WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l113c17 or
	  i_client_CMDQ$D_OUT or
	  WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l151c25 or
	  crnt_subcmd_SUBQ or
	  WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l134c34 or
	  MUX_o_server_CMDQ$enq_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l112c30:
	  o_server_CMDQ$D_IN = header0_SUBCMDQ;
      WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l113c17:
	  o_server_CMDQ$D_IN = i_client_CMDQ$D_OUT;
      WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l151c25:
	  o_server_CMDQ$D_IN = crnt_subcmd_SUBQ;
      WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l134c34:
	  o_server_CMDQ$D_IN = MUX_o_server_CMDQ$enq_1__VAL_4;
      default: o_server_CMDQ$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign o_server_CMDQ$ENQ =
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l112c30 ||
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l113c17 ||
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l151c25 ||
	     WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l134c34 ;
  assign o_server_CMDQ$DEQ = EN_bluetile_server_CMDQ_response_get ;
  assign o_server_CMDQ$CLR = 1'b0 ;

  // remaining internal signals
  assign cmd_memory_serverAdapterA_cnt_6_SLT_3___d173 =
	     (cmd_memory_serverAdapterA_cnt ^ 3'h4) < 3'd7 ;
  assign cmd_memory_serverAdapterB_cnt_3_PLUS_IF_cmd_me_ETC___d89 =
	     cmd_memory_serverAdapterB_cnt +
	     (WILL_FIRE_RL_cmd_memory_serverAdapterB_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (cmd_memory_serverAdapterB_outData_deqCalled$whas ?
		3'd7 :
		3'd0) ;
  assign cmd_memory_serverAdapterB_cnt_3_SLT_3___d272 =
	     (cmd_memory_serverAdapterB_cnt ^ 3'h4) < 3'd7 ;
  assign fsm_cmd_mem_output_FSM_abort_whas__06_AND_fsm__ETC___d307 =
	     fsm_cmd_mem_output_FSM_state_mkFSMstate == 4'd0 ||
	     fsm_cmd_mem_output_FSM_state_mkFSMstate == 4'd3 ||
	     !offset_SUBQ_42_ULE_subcmdq_length_43_BITS_13_T_ETC___d245 &&
	     (fsm_cmd_mem_output_FSM_state_mkFSMstate == 4'd7 ||
	      fsm_cmd_mem_output_FSM_state_mkFSMstate == 4'd10) ;
  assign fsm_cmd_mem_update_FSM_abort_whas__18_AND_fsm__ETC___d200 =
	     (fsm_cmd_mem_update_FSM_state_mkFSMstate == 3'd0 ||
	      !offset_SUBCMDCPU_52_ULE_0x0_CONCAT_header0_SUB_ETC___d156 &&
	      fsm_cmd_mem_update_FSM_state_mkFSMstate == 3'd3 ||
	      !offset_SUBCMDCPU_52_ULE_0x0_CONCAT_header0_SUB_ETC___d156 &&
	      fsm_cmd_mem_update_FSM_state_mkFSMstate == 3'd5) &&
	     (!fsm_cmd_mem_update_FSM_start_reg_1 ||
	      fsm_cmd_mem_update_FSM_state_fired) ;
  assign offset_SUBCMDCPU_52_ULE_0x0_CONCAT_header0_SUB_ETC___d156 =
	     offset_SUBCMDCPU <= subcmdcpu_length__h653 ;
  assign offset_SUBQ_42_ULE_subcmdq_length_43_BITS_13_T_ETC___d245 =
	     offset_SUBQ <= subcmdq_length[13:0] ;
  assign subcmdcpu_length__h653 = { 6'h0, header0_SUBCMDCPU[7:0] } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        cmd_memory_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cmd_memory_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	cmd_memory_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cmd_memory_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	crnt_subcmd_SUBCMDCPU <= `BSV_ASSIGNMENT_DELAY 32'd0;
	crnt_subcmd_SUBQ <= `BSV_ASSIGNMENT_DELAY 32'd0;
	fsm_cmd_mem_output_FSM_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fsm_cmd_mem_output_FSM_start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fsm_cmd_mem_output_FSM_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	    1'd1;
	fsm_cmd_mem_output_FSM_state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fsm_cmd_mem_output_FSM_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 4'd0;
	fsm_cmd_mem_update_FSM_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fsm_cmd_mem_update_FSM_start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fsm_cmd_mem_update_FSM_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	    1'd1;
	fsm_cmd_mem_update_FSM_state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fsm_cmd_mem_update_FSM_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 3'd0;
	header0_SUBCMDCPU <= `BSV_ASSIGNMENT_DELAY 32'd0;
	header0_SUBCMDQ <= `BSV_ASSIGNMENT_DELAY 32'd0;
	offset_SUBCMDCPU <= `BSV_ASSIGNMENT_DELAY 14'd0;
	offset_SUBQ <= `BSV_ASSIGNMENT_DELAY 14'd0;
	pointer_cmd_addr_SUBCMDCPU <= `BSV_ASSIGNMENT_DELAY 14'd0;
	pointer_cmd_addr_SUBQ <= `BSV_ASSIGNMENT_DELAY 14'd0;
	subcmdq_length <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (cmd_memory_serverAdapterA_cnt$EN)
	  cmd_memory_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      cmd_memory_serverAdapterA_cnt$D_IN;
	if (cmd_memory_serverAdapterA_s1$EN)
	  cmd_memory_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      cmd_memory_serverAdapterA_s1$D_IN;
	if (cmd_memory_serverAdapterB_cnt$EN)
	  cmd_memory_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      cmd_memory_serverAdapterB_cnt$D_IN;
	if (cmd_memory_serverAdapterB_s1$EN)
	  cmd_memory_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      cmd_memory_serverAdapterB_s1$D_IN;
	if (crnt_subcmd_SUBCMDCPU$EN)
	  crnt_subcmd_SUBCMDCPU <= `BSV_ASSIGNMENT_DELAY
	      crnt_subcmd_SUBCMDCPU$D_IN;
	if (crnt_subcmd_SUBQ$EN)
	  crnt_subcmd_SUBQ <= `BSV_ASSIGNMENT_DELAY crnt_subcmd_SUBQ$D_IN;
	if (fsm_cmd_mem_output_FSM_start_reg$EN)
	  fsm_cmd_mem_output_FSM_start_reg <= `BSV_ASSIGNMENT_DELAY
	      fsm_cmd_mem_output_FSM_start_reg$D_IN;
	if (fsm_cmd_mem_output_FSM_start_reg_1$EN)
	  fsm_cmd_mem_output_FSM_start_reg_1 <= `BSV_ASSIGNMENT_DELAY
	      fsm_cmd_mem_output_FSM_start_reg_1$D_IN;
	if (fsm_cmd_mem_output_FSM_state_can_overlap$EN)
	  fsm_cmd_mem_output_FSM_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      fsm_cmd_mem_output_FSM_state_can_overlap$D_IN;
	if (fsm_cmd_mem_output_FSM_state_fired$EN)
	  fsm_cmd_mem_output_FSM_state_fired <= `BSV_ASSIGNMENT_DELAY
	      fsm_cmd_mem_output_FSM_state_fired$D_IN;
	if (fsm_cmd_mem_output_FSM_state_mkFSMstate$EN)
	  fsm_cmd_mem_output_FSM_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      fsm_cmd_mem_output_FSM_state_mkFSMstate$D_IN;
	if (fsm_cmd_mem_update_FSM_start_reg$EN)
	  fsm_cmd_mem_update_FSM_start_reg <= `BSV_ASSIGNMENT_DELAY
	      fsm_cmd_mem_update_FSM_start_reg$D_IN;
	if (fsm_cmd_mem_update_FSM_start_reg_1$EN)
	  fsm_cmd_mem_update_FSM_start_reg_1 <= `BSV_ASSIGNMENT_DELAY
	      fsm_cmd_mem_update_FSM_start_reg_1$D_IN;
	if (fsm_cmd_mem_update_FSM_state_can_overlap$EN)
	  fsm_cmd_mem_update_FSM_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      fsm_cmd_mem_update_FSM_state_can_overlap$D_IN;
	if (fsm_cmd_mem_update_FSM_state_fired$EN)
	  fsm_cmd_mem_update_FSM_state_fired <= `BSV_ASSIGNMENT_DELAY
	      fsm_cmd_mem_update_FSM_state_fired$D_IN;
	if (fsm_cmd_mem_update_FSM_state_mkFSMstate$EN)
	  fsm_cmd_mem_update_FSM_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      fsm_cmd_mem_update_FSM_state_mkFSMstate$D_IN;
	if (header0_SUBCMDCPU$EN)
	  header0_SUBCMDCPU <= `BSV_ASSIGNMENT_DELAY header0_SUBCMDCPU$D_IN;
	if (header0_SUBCMDQ$EN)
	  header0_SUBCMDQ <= `BSV_ASSIGNMENT_DELAY header0_SUBCMDQ$D_IN;
	if (offset_SUBCMDCPU$EN)
	  offset_SUBCMDCPU <= `BSV_ASSIGNMENT_DELAY offset_SUBCMDCPU$D_IN;
	if (offset_SUBQ$EN)
	  offset_SUBQ <= `BSV_ASSIGNMENT_DELAY offset_SUBQ$D_IN;
	if (pointer_cmd_addr_SUBCMDCPU$EN)
	  pointer_cmd_addr_SUBCMDCPU <= `BSV_ASSIGNMENT_DELAY
	      pointer_cmd_addr_SUBCMDCPU$D_IN;
	if (pointer_cmd_addr_SUBQ$EN)
	  pointer_cmd_addr_SUBQ <= `BSV_ASSIGNMENT_DELAY
	      pointer_cmd_addr_SUBQ$D_IN;
	if (subcmdq_length$EN)
	  subcmdq_length <= `BSV_ASSIGNMENT_DELAY subcmdq_length$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cmd_memory_serverAdapterA_cnt = 3'h2;
    cmd_memory_serverAdapterA_s1 = 2'h2;
    cmd_memory_serverAdapterB_cnt = 3'h2;
    cmd_memory_serverAdapterB_s1 = 2'h2;
    crnt_subcmd_SUBCMDCPU = 32'hAAAAAAAA;
    crnt_subcmd_SUBQ = 32'hAAAAAAAA;
    fsm_cmd_mem_output_FSM_start_reg = 1'h0;
    fsm_cmd_mem_output_FSM_start_reg_1 = 1'h0;
    fsm_cmd_mem_output_FSM_state_can_overlap = 1'h0;
    fsm_cmd_mem_output_FSM_state_fired = 1'h0;
    fsm_cmd_mem_output_FSM_state_mkFSMstate = 4'hA;
    fsm_cmd_mem_update_FSM_start_reg = 1'h0;
    fsm_cmd_mem_update_FSM_start_reg_1 = 1'h0;
    fsm_cmd_mem_update_FSM_state_can_overlap = 1'h0;
    fsm_cmd_mem_update_FSM_state_fired = 1'h0;
    fsm_cmd_mem_update_FSM_state_mkFSMstate = 3'h2;
    header0_SUBCMDCPU = 32'hAAAAAAAA;
    header0_SUBCMDQ = 32'hAAAAAAAA;
    offset_SUBCMDCPU = 14'h2AAA;
    offset_SUBQ = 14'h2AAA;
    pointer_cmd_addr_SUBCMDCPU = 14'h2AAA;
    pointer_cmd_addr_SUBQ = 14'h2AAA;
    subcmdq_length = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N)
      if (cmd_memory_serverAdapterA_s1[1] &&
	  !cmd_memory_serverAdapterA_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N)
      if (cmd_memory_serverAdapterB_s1[1] &&
	  !cmd_memory_serverAdapterB_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N)
      if (fsm_cmd_mem_update_FSM_state_mkFSMstate == 3'd1 &&
	  (WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l76c23 ||
	   WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l85c17 ||
	   WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l90c17))
	$display("Error: \"..//GPIOCMD_cmd_memory.bsv\", line 70, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_fsm_cmd_mem_update_FSM_action_l70c9] and\n  [RL_fsm_cmd_mem_update_FSM_action_l76c23,\n  RL_fsm_cmd_mem_update_FSM_action_l85c17,\n  RL_fsm_cmd_mem_update_FSM_action_l90c17] ) fired in the same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l76c23 &&
	  (WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l85c17 ||
	   WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l90c17))
	$display("Error: \"..//GPIOCMD_cmd_memory.bsv\", line 76, column 23: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_fsm_cmd_mem_update_FSM_action_l76c23] and\n  [RL_fsm_cmd_mem_update_FSM_action_l85c17,\n  RL_fsm_cmd_mem_update_FSM_action_l90c17] ) fired in the same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l85c17 &&
	  WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l90c17)
	$display("Error: \"..//GPIOCMD_cmd_memory.bsv\", line 85, column 17: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_fsm_cmd_mem_update_FSM_action_l85c17] and\n  [RL_fsm_cmd_mem_update_FSM_action_l90c17] ) fired in the same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l65c9 &&
	  (fsm_cmd_mem_update_FSM_state_mkFSMstate == 3'd1 ||
	   WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l76c23 ||
	   WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l85c17 ||
	   WILL_FIRE_RL_fsm_cmd_mem_update_FSM_action_l90c17))
	$display("Error: \"..//GPIOCMD_cmd_memory.bsv\", line 65, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_fsm_cmd_mem_update_FSM_action_l65c9] and\n  [RL_fsm_cmd_mem_update_FSM_action_l70c9,\n  RL_fsm_cmd_mem_update_FSM_action_l76c23,\n  RL_fsm_cmd_mem_update_FSM_action_l85c17,\n  RL_fsm_cmd_mem_update_FSM_action_l90c17] ) fired in the same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l112c30 &&
	  (WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l113c17 ||
	   WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l120c17 ||
	   WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l126c31 ||
	   WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l130c17 ||
	   WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l134c34 ||
	   WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l142c35 ||
	   WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l146c25 ||
	   WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l151c25))
	$display("Error: \"..//GPIOCMD_cmd_memory.bsv\", line 112, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_fsm_cmd_mem_output_FSM_action_l112c30] and\n  [RL_fsm_cmd_mem_output_FSM_action_l113c17,\n  RL_fsm_cmd_mem_output_FSM_action_l120c17,\n  RL_fsm_cmd_mem_output_FSM_action_l126c31,\n  RL_fsm_cmd_mem_output_FSM_action_l130c17,\n  RL_fsm_cmd_mem_output_FSM_action_l134c34,\n  RL_fsm_cmd_mem_output_FSM_action_l142c35,\n  RL_fsm_cmd_mem_output_FSM_action_l146c25,\n  RL_fsm_cmd_mem_output_FSM_action_l151c25] ) fired in the same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l113c17 &&
	  (WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l120c17 ||
	   WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l126c31 ||
	   WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l130c17 ||
	   WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l134c34 ||
	   WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l142c35 ||
	   WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l146c25 ||
	   WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l151c25))
	$display("Error: \"..//GPIOCMD_cmd_memory.bsv\", line 113, column 17: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_fsm_cmd_mem_output_FSM_action_l113c17] and\n  [RL_fsm_cmd_mem_output_FSM_action_l120c17,\n  RL_fsm_cmd_mem_output_FSM_action_l126c31,\n  RL_fsm_cmd_mem_output_FSM_action_l130c17,\n  RL_fsm_cmd_mem_output_FSM_action_l134c34,\n  RL_fsm_cmd_mem_output_FSM_action_l142c35,\n  RL_fsm_cmd_mem_output_FSM_action_l146c25,\n  RL_fsm_cmd_mem_output_FSM_action_l151c25] ) fired in the same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l120c17 &&
	  (WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l126c31 ||
	   WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l130c17 ||
	   WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l134c34 ||
	   WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l142c35 ||
	   WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l146c25 ||
	   WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l151c25))
	$display("Error: \"..//GPIOCMD_cmd_memory.bsv\", line 120, column 17: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_fsm_cmd_mem_output_FSM_action_l120c17] and\n  [RL_fsm_cmd_mem_output_FSM_action_l126c31,\n  RL_fsm_cmd_mem_output_FSM_action_l130c17,\n  RL_fsm_cmd_mem_output_FSM_action_l134c34,\n  RL_fsm_cmd_mem_output_FSM_action_l142c35,\n  RL_fsm_cmd_mem_output_FSM_action_l146c25,\n  RL_fsm_cmd_mem_output_FSM_action_l151c25] ) fired in the same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l126c31 &&
	  (WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l130c17 ||
	   WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l134c34 ||
	   WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l142c35 ||
	   WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l146c25 ||
	   WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l151c25))
	$display("Error: \"..//GPIOCMD_cmd_memory.bsv\", line 126, column 31: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_fsm_cmd_mem_output_FSM_action_l126c31] and\n  [RL_fsm_cmd_mem_output_FSM_action_l130c17,\n  RL_fsm_cmd_mem_output_FSM_action_l134c34,\n  RL_fsm_cmd_mem_output_FSM_action_l142c35,\n  RL_fsm_cmd_mem_output_FSM_action_l146c25,\n  RL_fsm_cmd_mem_output_FSM_action_l151c25] ) fired in the same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l134c34 &&
	  (WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l142c35 ||
	   WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l146c25 ||
	   WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l151c25))
	$display("Error: \"..//GPIOCMD_cmd_memory.bsv\", line 134, column 34: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_fsm_cmd_mem_output_FSM_action_l134c34] and\n  [RL_fsm_cmd_mem_output_FSM_action_l142c35,\n  RL_fsm_cmd_mem_output_FSM_action_l146c25,\n  RL_fsm_cmd_mem_output_FSM_action_l151c25] ) fired in the same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l130c17 &&
	  (WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l134c34 ||
	   WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l142c35 ||
	   WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l146c25 ||
	   WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l151c25))
	$display("Error: \"..//GPIOCMD_cmd_memory.bsv\", line 130, column 17: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_fsm_cmd_mem_output_FSM_action_l130c17] and\n  [RL_fsm_cmd_mem_output_FSM_action_l134c34,\n  RL_fsm_cmd_mem_output_FSM_action_l142c35,\n  RL_fsm_cmd_mem_output_FSM_action_l146c25,\n  RL_fsm_cmd_mem_output_FSM_action_l151c25] ) fired in the same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l142c35 &&
	  (WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l146c25 ||
	   WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l151c25))
	$display("Error: \"..//GPIOCMD_cmd_memory.bsv\", line 142, column 35: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_fsm_cmd_mem_output_FSM_action_l142c35] and\n  [RL_fsm_cmd_mem_output_FSM_action_l146c25,\n  RL_fsm_cmd_mem_output_FSM_action_l151c25] ) fired in the same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l146c25 &&
	  WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l151c25)
	$display("Error: \"..//GPIOCMD_cmd_memory.bsv\", line 146, column 25: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_fsm_cmd_mem_output_FSM_action_l146c25] and\n  [RL_fsm_cmd_mem_output_FSM_action_l151c25] ) fired in the same clock cycle.\n");
    if (RST_N)
      if (WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l105c9 &&
	  (WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l112c30 ||
	   WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l113c17 ||
	   WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l120c17 ||
	   WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l126c31 ||
	   WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l130c17 ||
	   WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l134c34 ||
	   WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l142c35 ||
	   WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l146c25 ||
	   WILL_FIRE_RL_fsm_cmd_mem_output_FSM_action_l151c25))
	$display("Error: \"..//GPIOCMD_cmd_memory.bsv\", line 105, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_fsm_cmd_mem_output_FSM_action_l105c9] and\n  [RL_fsm_cmd_mem_output_FSM_action_l112c30,\n  RL_fsm_cmd_mem_output_FSM_action_l113c17,\n  RL_fsm_cmd_mem_output_FSM_action_l120c17,\n  RL_fsm_cmd_mem_output_FSM_action_l126c31,\n  RL_fsm_cmd_mem_output_FSM_action_l130c17,\n  RL_fsm_cmd_mem_output_FSM_action_l134c34,\n  RL_fsm_cmd_mem_output_FSM_action_l142c35,\n  RL_fsm_cmd_mem_output_FSM_action_l146c25,\n  RL_fsm_cmd_mem_output_FSM_action_l151c25] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkGPIOCMD_cmd_memory

